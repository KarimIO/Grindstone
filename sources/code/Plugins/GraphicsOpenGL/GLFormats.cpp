#include <GL/gl3w.h>

#include <Common/Assert.hpp>

#include "GLFormats.hpp"
#include <GL/gl.h>

struct OpenGLFormatMapping {
	GLenum format;
	GLenum internalFormat;
	GLenum type;
	int componentCount;
	bool isNormalized;
};

OpenGLFormatMapping formatMappings[] = {
	{ GL_NONE, GL_NONE, GL_NONE, 0, false }, // UNDEFINED
	{ GL_RGBA, GL_RGBA4, GL_UNSIGNED_SHORT_4_4_4_4, 2, true }, // R4G4_UNORM_PACK8
	{ GL_RGBA, GL_RGBA4, GL_UNSIGNED_SHORT_4_4_4_4, 4, true }, // R4G4B4A4_UNORM_PACK16
	{ GL_RGBA, GL_RGBA4, GL_UNSIGNED_SHORT_4_4_4_4, 4, true }, // B4G4R4A4_UNORM_PACK16
	{ GL_RGB, GL_RGB565, GL_UNSIGNED_SHORT_5_6_5, 3, true }, // R5G6B5_UNORM_PACK16
	{ GL_RGB, GL_RGB565, GL_UNSIGNED_SHORT_5_6_5, 3, true }, // B5G6R5_UNORM_PACK16
	{ GL_RGBA, GL_RGB5_A1, GL_UNSIGNED_SHORT_5_5_5_1, 4, true }, // R5G5B5A1_UNORM_PACK16
	{ GL_RGBA, GL_RGB5_A1, GL_UNSIGNED_SHORT_5_5_5_1, 4, true }, // B5G5R5A1_UNORM_PACK16
	{ GL_RGBA, GL_RGB5_A1, GL_UNSIGNED_SHORT_5_5_5_1, 4, true }, // A1R5G5B5_UNORM_PACK16
	{ GL_RED, GL_R8, GL_UNSIGNED_BYTE, 1, true }, // R8_UNORM
	{ GL_RED, GL_R8_SNORM, GL_BYTE, 1, true }, // R8_SNORM
	{ GL_RED, GL_R8, GL_UNSIGNED_BYTE, 1, false }, // R8_USCALED
	{ GL_RED, GL_R8, GL_BYTE, 1, false }, // R8_SSCALED
	{ GL_RED, GL_R8UI, GL_UNSIGNED_BYTE, 1, false }, // R8_UINT
	{ GL_RED, GL_R8I, GL_BYTE, 1, false }, // R8_SINT
	{ GL_RED, GL_SR8_EXT, GL_UNSIGNED_BYTE, 1, true }, // R8_SRGB
	{ GL_RG, GL_RG8, GL_UNSIGNED_BYTE, 2, true }, // R8G8_UNORM
	{ GL_RG, GL_RG8_SNORM, GL_BYTE, 2, true }, // R8G8_SNORM
	{ GL_RG, GL_RG8, GL_UNSIGNED_BYTE, 2, false }, // R8G8_USCALED
	{ GL_RG, GL_RG8, GL_BYTE, 2, false }, // R8G8_SSCALED
	{ GL_RG, GL_RG8UI, GL_UNSIGNED_BYTE, 2, false }, // R8G8_UINT
	{ GL_RG, GL_RG8I, GL_BYTE, 2, false }, // R8G8_SINT
	{ GL_RG, GL_SRG8_EXT, GL_UNSIGNED_BYTE, 2, true }, // R8G8_SRGB
	{ GL_RGB, GL_RGB8, GL_UNSIGNED_BYTE, 3, true }, // R8G8B8_UNORM
	{ GL_RGB, GL_RGB8_SNORM, GL_BYTE, 3, true }, // R8G8B8_SNORM
	{ GL_RGB, GL_RGB8, GL_UNSIGNED_BYTE, 3, false }, // R8G8B8_USCALED
	{ GL_RGB, GL_RGB8, GL_BYTE, 3, false }, // R8G8B8_SSCALED
	{ GL_RGB, GL_RGB8UI, GL_UNSIGNED_BYTE, 3, false }, // R8G8B8_UINT
	{ GL_RGB, GL_RGB8I, GL_BYTE, 3, false }, // R8G8B8_SINT
	{ GL_RGB, GL_SRGB8, GL_UNSIGNED_BYTE, 3, true }, // R8G8B8_SRGB
	{ GL_RGB, GL_RGB8, GL_UNSIGNED_BYTE, 3, true }, // B8G8R8_UNORM
	{ GL_RGB, GL_RGB8_SNORM, GL_BYTE, 3, true }, // B8G8R8_SNORM
	{ GL_RGB, GL_RGB8, GL_UNSIGNED_BYTE, 3, false }, // B8G8R8_USCALED
	{ GL_RGB, GL_RGB8, GL_BYTE, 3, false }, // B8G8R8_SSCALED
	{ GL_RGB, GL_RGB8UI, GL_UNSIGNED_BYTE, 3, false }, // B8G8R8_UINT
	{ GL_RGB, GL_RGB8I, GL_BYTE, 3, false }, // B8G8R8_SINT
	{ GL_RGB, GL_SRGB8, GL_UNSIGNED_BYTE, 3, true }, // B8G8R8_SRGB
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, true }, // R8G8B8A8_UNORM
	{ GL_RGBA, GL_RGBA8_SNORM, GL_BYTE, 4, true }, // R8G8B8A8_SNORM
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, false }, // R8G8B8A8_USCALED
	{ GL_RGBA, GL_RGBA8, GL_BYTE, 4, false }, // R8G8B8A8_SSCALED
	{ GL_RGBA, GL_RGBA8UI, GL_UNSIGNED_BYTE, 4, false }, // R8G8B8A8_UINT
	{ GL_RGBA, GL_RGBA8I, GL_BYTE, 4, false }, // R8G8B8A8_SINT
	{ GL_RGBA, GL_SRGB8_ALPHA8, GL_UNSIGNED_BYTE, 4, true }, // R8G8B8A8_SRGB
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, true }, // B8G8R8A8_UNORM
	{ GL_RGBA, GL_RGBA8_SNORM, GL_BYTE, 4, true }, // B8G8R8A8_SNORM
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, false }, // B8G8R8A8_USCALED
	{ GL_RGBA, GL_RGBA8, GL_BYTE, 4, false }, // B8G8R8A8_SSCALED
	{ GL_RGBA, GL_RGBA8UI, GL_UNSIGNED_BYTE, 4, false }, // B8G8R8A8_UINT
	{ GL_RGBA, GL_RGBA8I, GL_BYTE, 4, false }, // B8G8R8A8_SINT
	{ GL_RGBA, GL_SRGB8_ALPHA8, GL_UNSIGNED_BYTE, 4, true }, // B8G8R8A8_SRGB
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, true }, // A8B8G8R8_UNORM_PACK32
	{ GL_RGBA, GL_RGBA8_SNORM, GL_BYTE, 4, true }, // A8B8G8R8_SNORM_PACK32
	{ GL_RGBA, GL_RGBA8, GL_UNSIGNED_BYTE, 4, false }, // A8B8G8R8_USCALED_PACK32
	{ GL_RGBA, GL_RGBA8, GL_BYTE, 4, false }, // A8B8G8R8_SSCALED_PACK32
	{ GL_RGBA, GL_RGBA8UI, GL_UNSIGNED_BYTE, 4, false }, // A8B8G8R8_UINT_PACK32
	{ GL_RGBA, GL_RGBA8I, GL_BYTE, 4, false }, // A8B8G8R8_SINT_PACK32
	{ GL_RGBA, GL_SRGB8_ALPHA8, GL_UNSIGNED_BYTE, 4, true }, // A8B8G8R8_SRGB_PACK32

	// TODO: Fix all of these:
	// { GL_BGRA, GL_RGB10_A2, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_UNORM_PACK32
	// { GL_BGRA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_SNORM_PACK32
	// { GL_BGRA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_USCALED_PACK32
	// { GL_BGRA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_SSCALED_PACK32
	// { GL_BGRA_INTEGER, GL_RGB10_A2UI, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_UINT_PACK32
	// { GL_BGRA_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2R10G10B10_SINT_PACK32
	// { GL_RGBA, GL_RGB10_A2, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_UNORM_PACK32
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_SNORM_PACK32
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_USCALED_PACK32
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_SSCALED_PACK32
	// { GL_RGBA_INTEGER, GL_RGB10_A2UI, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_UINT_PACK32
	// { GL_RGBA_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // A2B10G10R10_SINT_PACK32
	// { GL_RED, GL_R16, GL_UNSIGNED_BYTE, 4, false }, // R16_UNORM
	// { GL_RED, GL_R16_SNORM, GL_UNSIGNED_BYTE, 4, false }, // R16_SNORM
	// { GL_RED, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16_USCALED
	// { GL_RED, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16_SSCALED
	// { GL_RED_INTEGER, GL_R16UI, GL_UNSIGNED_BYTE, 4, false }, // R16_UINT
	// { GL_RED_INTEGER, GL_R16I, GL_UNSIGNED_BYTE, 4, false }, // R16_SINT
	// { GL_RED, GL_R16F, GL_UNSIGNED_BYTE, 4, false }, // R16_SFLOAT
	// { GL_RG, GL_RG16, GL_UNSIGNED_BYTE, 4, false }, // R16G16_UNORM
	// { GL_RG, GL_RG16_SNORM, GL_UNSIGNED_BYTE, 4, false }, // R16G16_SNORM
	// { GL_RG, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16_USCALED
	// { GL_RG, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16_SSCALED
	// { GL_RG_INTEGER, GL_RG16UI, GL_UNSIGNED_BYTE, 4, false }, // R16G16_UINT
	// { GL_RG_INTEGER, GL_RG16I, GL_UNSIGNED_BYTE, 4, false }, // R16G16_SINT
	// { GL_RG, GL_RG16F, GL_UNSIGNED_BYTE, 4, false }, // R16G16_SFLOAT
	// { GL_RGB, GL_RGB16, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_UNORM
	// { GL_RGB, GL_RGB16_SNORM, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_SNORM
	// { GL_RGB, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_USCALED
	// { GL_RGB, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_SSCALED
	// { GL_RGB_INTEGER, GL_RGB16UI, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_UINT
	// { GL_RGB_INTEGER, GL_RGB16I, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_SINT
	// { GL_RGB, GL_RGB16F, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16_SFLOAT
	// { GL_RGBA, GL_RGBA16, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_UNORM
	// { GL_RGBA, GL_RGBA16_SNORM, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_SNORM
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_USCALED
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_SSCALED
	// { GL_RGBA_INTEGER, GL_RGBA16UI, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_UINT
	// { GL_RGBA_INTEGER, GL_RGBA16I, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_SINT
	// { GL_RGBA, GL_RGBA16F, GL_UNSIGNED_BYTE, 4, false }, // R16G16B16A16_SFLOAT
	// { GL_RED_INTEGER, GL_R32UI, GL_UNSIGNED_BYTE, 4, false }, // R32_UINT
	// { GL_RED_INTEGER, GL_R32I, GL_UNSIGNED_BYTE, 4, false }, // R32_SINT
	// { GL_RED, GL_R32F, GL_UNSIGNED_BYTE, 4, false }, // R32_SFLOAT
	// { GL_RG_INTEGER, GL_RG32UI, GL_UNSIGNED_BYTE, 4, false }, // R32G32_UINT
	// { GL_RG_INTEGER, GL_RG32I, GL_UNSIGNED_BYTE, 4, false }, // R32G32_SINT
	// { GL_RG, GL_RG32F, GL_UNSIGNED_BYTE, 4, false }, // R32G32_SFLOAT
	// { GL_RGB_INTEGER, GL_RGB32UI, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32_UINT
	// { GL_RGB_INTEGER, GL_RGB32I, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32_SINT
	// { GL_RGB, GL_RGB32F, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32_SFLOAT
	// { GL_RGBA_INTEGER, GL_RGBA32UI, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32A32_UINT
	// { GL_RGBA_INTEGER, GL_RGBA32I, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32A32_SINT
	// { GL_RGBA, GL_RGBA32F, GL_UNSIGNED_BYTE, 4, false }, // R32G32B32A32_SFLOAT
	// { GL_RED_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64_UINT
	// { GL_RED_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64_SINT
	// { GL_RED, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64_SFLOAT
	// { GL_RG_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64_UINT
	// { GL_RG_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64_SINT
	// { GL_RG, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64_SFLOAT
	// { GL_RGB_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64_UINT
	// { GL_RGB_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64_SINT
	// { GL_RGB, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64_SFLOAT
	// { GL_RGBA_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64A64_UINT
	// { GL_RGBA_INTEGER, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64A64_SINT
	// { GL_RGBA, GL_NONE, GL_UNSIGNED_BYTE, 4, false }, // R64G64B64A64_SFLOAT
	// { GL_RGB, GL_R11F_G11F_B10F, GL_UNSIGNED_BYTE, 4, false }, // B10G11R11_UFLOAT_PACK32
	// { GL_RGB, GL_RGB9_E5, GL_UNSIGNED_BYTE, 4, false }, // E5B9G9R9_UFLOAT_PACK32
	// { GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT16, GL_UNSIGNED_BYTE, 4, false }, // D16_UNORM
	// { GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT24, GL_UNSIGNED_BYTE, 4, false }, // X8_D24_UNORM_PACK32
	// { GL_DEPTH_COMPONENT, GL_DEPTH_COMPONENT32F, GL_UNSIGNED_BYTE, 4, false }, // D32_SFLOAT
	// { GL_STENCIL_INDEX, GL_STENCIL_INDEX8, GL_UNSIGNED_BYTE, 4, false }, // S8_UINT
	// { GL_DEPTH_STENCIL, GL_DEPTH24_STENCIL8, GL_UNSIGNED_BYTE, 4, false }, // D16_UNORM_S8_UINT
	// { GL_DEPTH_STENCIL, GL_DEPTH24_STENCIL8, GL_UNSIGNED_BYTE, 4, false }, // D24_UNORM_S8_UINT
	// { GL_DEPTH_STENCIL, GL_DEPTH32F_STENCIL8, GL_UNSIGNED_BYTE, 4, false }, // D32_SFLOAT_S8_UINT
	// { GL_COMPRESSED_RGB_S3TC_DXT1_EXT, GL_COMPRESSED_RGB_S3TC_DXT1_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC1_RGB_UNORM_BLOCK
	// { GL_COMPRESSED_SRGB_S3TC_DXT1_EXT, GL_COMPRESSED_SRGB_S3TC_DXT1_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC1_RGB_SRGB_BLOCK
	// { GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC1_RGBA_UNORM_BLOCK
	// { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC1_RGBA_SRGB_BLOCK
	// { GL_COMPRESSED_RGBA_S3TC_DXT3_EXT, GL_COMPRESSED_RGBA_S3TC_DXT3_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC2_UNORM_BLOCK
	// { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC2_SRGB_BLOCK
	// { GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC3_UNORM_BLOCK
	// { GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT, GL_UNSIGNED_BYTE, 4, false }, // BC3_SRGB_BLOCK
	// { GL_COMPRESSED_RED_RGTC, GL_COMPRESSED_RED_RGTC1, GL_UNSIGNED_BYTE, 4, false }, // BC4_UNORM_BLOCK
	// 
	// { GL_RGBA, GL_BC4_SNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC4_SNORM_BLOCK
	// { GL_RGBA, GL_BC5_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC5_UNORM_BLOCK
	// { GL_RGBA, GL_BC5_SNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC5_SNORM_BLOCK
	// { GL_RGBA, GL_BC6H_UFLOAT_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC6H_UFLOAT_BLOCK
	// { GL_RGBA, GL_BC6H_SFLOAT_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC6H_SFLOAT_BLOCK
	// { GL_RGBA, GL_BC7_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC7_UNORM_BLOCK
	// { GL_RGBA, GL_BC7_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // BC7_SRGB_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8_UNORM_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8_SRGB_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8A1_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8A1_UNORM_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8A1_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8A1_SRGB_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8A8_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8A8_UNORM_BLOCK
	// { GL_RGBA, GL_ETC2_R8G8B8A8_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ETC2_R8G8B8A8_SRGB_BLOCK
	// { GL_RGBA, GL_EAC_R11_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // EAC_R11_UNORM_BLOCK
	// { GL_RGBA, GL_EAC_R11_SNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // EAC_R11_SNORM_BLOCK
	// { GL_RGBA, GL_EAC_R11G11_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // EAC_R11G11_UNORM_BLOCK
	// { GL_RGBA, GL_EAC_R11G11_SNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // EAC_R11G11_SNORM_BLOCK
	// { GL_RGBA, GL_ASTC_4x4_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_4x4_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_4x4_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_4x4_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_5x4_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x4_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_5x4_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x4_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_5x5_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x5_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_5x5_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x5_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_6x5_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x5_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_6x5_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x5_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_6x6_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x6_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_6x6_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x6_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_8x5_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x5_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_8x5_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x5_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_8x6_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x6_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_8x6_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x6_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_8x8_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x8_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_8x8_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x8_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_10x5_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x5_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_10x5_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x5_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_10x6_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x6_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_10x6_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x6_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_10x8_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x8_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_10x8_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x8_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_10x10_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x10_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_10x10_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x10_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_12x10_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x10_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_12x10_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x10_SRGB_BLOCK
	// { GL_RGBA, GL_ASTC_12x12_UNORM_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x12_UNORM_BLOCK
	// { GL_RGBA, GL_ASTC_12x12_SRGB_BLOCK, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x12_SRGB_BLOCK
	// { GL_RGBA, GL_G8B8G8R8_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8B8G8R8_422_UNORM
	// { GL_RGBA, GL_B8G8R8G8_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // B8G8R8G8_422_UNORM
	// { GL_RGBA, GL_G8_B8_R8_3PLANE_420_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8_R8_3PLANE_420_UNORM
	// { GL_RGBA, GL_G8_B8R8_2PLANE_420_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8R8_2PLANE_420_UNORM
	// { GL_RGBA, GL_G8_B8_R8_3PLANE_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8_R8_3PLANE_422_UNORM
	// { GL_RGBA, GL_G8_B8R8_2PLANE_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8R8_2PLANE_422_UNORM
	// { GL_RGBA, GL_G8_B8_R8_3PLANE_444_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8_R8_3PLANE_444_UNORM
	// { GL_RGBA, GL_R10X6_UNORM_PACK16, GL_UNSIGNED_BYTE, 4, true }, // R10X6_UNORM_PACK16
	// { GL_RGBA, GL_R10X6G10X6_UNORM_2PACK16, GL_UNSIGNED_BYTE, 4, true }, // R10X6G10X6_UNORM_2PACK16
	// { GL_RGBA, GL_R10X6G10X6B10X6A10X6_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // R10X6G10X6B10X6A10X6_UNORM_4PACK16
	// { GL_RGBA, GL_G10X6B10X6G10X6R10X6_422_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
	// { GL_RGBA, GL_B10X6G10X6R10X6G10X6_422_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
	// { GL_RGBA, GL_G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
	// { GL_RGBA, GL_G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
	// { GL_RGBA, GL_G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
	// { GL_RGBA, GL_G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
	// { GL_RGBA, GL_G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
	// { GL_RGBA, GL_R12X4_UNORM_PACK16, GL_UNSIGNED_BYTE, 4, true }, // R12X4_UNORM_PACK16
	// { GL_RGBA, GL_R12X4G12X4_UNORM_2PACK16, GL_UNSIGNED_BYTE, 4, true }, // R12X4G12X4_UNORM_2PACK16
	// { GL_RGBA, GL_R12X4G12X4B12X4A12X4_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // R12X4G12X4B12X4A12X4_UNORM_4PACK16
	// { GL_RGBA, GL_G12X4B12X4G12X4R12X4_422_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
	// { GL_RGBA, GL_B12X4G12X4R12X4G12X4_422_UNORM_4PACK16, GL_UNSIGNED_BYTE, 4, true }, // B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
	// { GL_RGBA, GL_G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
	// { GL_RGBA, GL_G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
	// { GL_RGBA, GL_G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
	// { GL_RGBA, GL_G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
	// { GL_RGBA, GL_G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
	// { GL_RGBA, GL_G16B16G16R16_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16B16G16R16_422_UNORM
	// { GL_RGBA, GL_B16G16R16G16_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // B16G16R16G16_422_UNORM
	// { GL_RGBA, GL_G16_B16_R16_3PLANE_420_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16_R16_3PLANE_420_UNORM
	// { GL_RGBA, GL_G16_B16R16_2PLANE_420_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16R16_2PLANE_420_UNORM
	// { GL_RGBA, GL_G16_B16_R16_3PLANE_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16_R16_3PLANE_422_UNORM
	// { GL_RGBA, GL_G16_B16R16_2PLANE_422_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16R16_2PLANE_422_UNORM
	// { GL_RGBA, GL_G16_B16_R16_3PLANE_444_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16_R16_3PLANE_444_UNORM
	// { GL_RGBA, GL_G8_B8R8_2PLANE_444_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G8_B8R8_2PLANE_444_UNORM
	// { GL_RGBA, GL_G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16
	// { GL_RGBA, GL_G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16, GL_UNSIGNED_BYTE, 4, true }, // G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16
	// { GL_RGBA, GL_G16_B16R16_2PLANE_444_UNORM, GL_UNSIGNED_BYTE, 4, true }, // G16_B16R16_2PLANE_444_UNORM
	// { GL_RGBA, GL_A4R4G4B4_UNORM_PACK16, GL_UNSIGNED_BYTE, 4, true }, // A4R4G4B4_UNORM_PACK16
	// { GL_RGBA, GL_A4B4G4R4_UNORM_PACK16, GL_UNSIGNED_BYTE, 4, true }, // A4B4G4R4_UNORM_PACK16
	// { GL_RGBA, GL_ASTC_4x4_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_4x4_SFLOAT
	// { GL_RGBA, GL_ASTC_5x4_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x4_SFLOAT
	// { GL_RGBA, GL_ASTC_5x5_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_5x5_SFLOAT
	// { GL_RGBA, GL_ASTC_6x5_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x5_SFLOAT
	// { GL_RGBA, GL_ASTC_6x6_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_6x6_SFLOAT
	// { GL_RGBA, GL_ASTC_8x5_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x5_SFLOAT
	// { GL_RGBA, GL_ASTC_8x6_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x6_SFLOAT
	// { GL_RGBA, GL_ASTC_8x8_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_8x8_SFLOAT
	// { GL_RGBA, GL_ASTC_10x5_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x5_SFLOAT
	// { GL_RGBA, GL_ASTC_10x6_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x6_SFLOAT
	// { GL_RGBA, GL_ASTC_10x8_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x8_SFLOAT
	// { GL_RGBA, GL_ASTC_10x10_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_10x10_SFLOAT
	// { GL_RGBA, GL_ASTC_12x10_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x10_SFLOAT
	// { GL_RGBA, GL_ASTC_12x12_SFLOAT, GL_UNSIGNED_BYTE, 4, true }, // ASTC_12x12_SFLOAT
	// { GL_RGBA, GL_PVRTC1_2BPP_UNORM, GL_UNSIGNED_BYTE, 4, true }, // PVRTC1_2BPP_UNORM
	// { GL_RGBA, GL_PVRTC1_4BPP_UNORM, GL_UNSIGNED_BYTE, 4, true }, // PVRTC1_4BPP_UNORM
	// { GL_RGBA, GL_PVRTC2_2BPP_UNORM, GL_UNSIGNED_BYTE, 4, true }, // PVRTC2_2BPP_UNORM
	// { GL_RGBA, GL_PVRTC2_4BPP_UNORM, GL_UNSIGNED_BYTE, 4, true }, // PVRTC2_4BPP_UNORM
	// { GL_RGBA, GL_PVRTC1_2BPP_SRGB, GL_UNSIGNED_BYTE, 4, true }, // PVRTC1_2BPP_SRGB
	// { GL_RGBA, GL_PVRTC1_4BPP_SRGB, GL_UNSIGNED_BYTE, 4, true }, // PVRTC1_4BPP_SRGB
	// { GL_RGBA, GL_PVRTC2_2BPP_SRGB, GL_UNSIGNED_BYTE, 4, true }, // PVRTC2_2BPP_SRGB
	// { GL_RGBA, GL_PVRTC2_4BPP_SRGB, GL_UNSIGNED_BYTE, 4, true }, // PVRTC2_4BPP_SRGB
	// { GL_RGBA, GL_R16G16_S10_5, GL_UNSIGNED_BYTE, 4, true }, // R16G16_S10_5
	// { GL_RGBA, GL_A1B5G5R5_UNORM_PACK16, GL_UNSIGNED_BYTE, 4, true }, // A1B5G5R5_UNORM_PACK16
	// { GL_RGBA, GL_A8_UNORM, GL_UNSIGNED_BYTE, 4, true }, // A8_UNORM
};


GLenum Grindstone::GraphicsAPI::TranslateMinFilterToOpenGL(bool hasMips, TextureFilter minFilter, TextureFilter mipFilter) {
	if (!hasMips) {
		return minFilter == TextureFilter::Linear
			? GL_LINEAR
			: GL_NEAREST;
	}

	if (mipFilter == TextureFilter::Linear) {
		return minFilter == TextureFilter::Linear
			? GL_NEAREST_MIPMAP_LINEAR
			: GL_NEAREST_MIPMAP_NEAREST;
	}

	return minFilter == TextureFilter::Linear
		? GL_LINEAR_MIPMAP_LINEAR
		: GL_LINEAR_MIPMAP_NEAREST;
}

GLenum Grindstone::GraphicsAPI::TranslateMagFilterToOpenGL(TextureFilter filter) {
	constexpr GLenum filters[] = {
		GL_NEAREST,
		GL_LINEAR
	};

	uint8_t index = static_cast<uint8_t>(filter);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(filters) / sizeof(filters[0]), "TranslateMagFilterToOpenGL: Invalid filter value.");

	return filters[index];
}

GLenum Grindstone::GraphicsAPI::TranslateWrapToOpenGL(TextureWrapMode wrap) {
	constexpr GLenum wraps[] = {
		GL_REPEAT,
		GL_CLAMP_TO_EDGE,
		GL_CLAMP_TO_BORDER,
		GL_MIRRORED_REPEAT,
		GL_MIRROR_CLAMP_TO_EDGE
	};

	uint8_t index = static_cast<uint8_t>(wrap);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(wraps) / sizeof(wraps[0]), "Invalid wrap value.");

	return wraps[index];
}

void Grindstone::GraphicsAPI::TranslateColorFormatToOpenGL(ColorFormat inFormat, bool& isCompressed, GLenum& format, GLint& internalFormat) {
	isCompressed = false;

	switch (inFormat) {
	case ColorFormat::RGB_DXT1:
		format = GL_COMPRESSED_RGB_S3TC_DXT1_EXT;
		isCompressed = true;
		break;
	case ColorFormat::RGBA_DXT1:
		format = GL_COMPRESSED_RGBA_S3TC_DXT1_EXT;
		isCompressed = true;
		break;
	case ColorFormat::RGBA_DXT3:
		format = GL_COMPRESSED_RGBA_S3TC_DXT3_EXT;
		isCompressed = true;
		break;
	case ColorFormat::RGBA_DXT5:
		format = GL_COMPRESSED_RGBA_S3TC_DXT5_EXT;
		isCompressed = true;
		break;
	case ColorFormat::R10G10B10A2:
		internalFormat = GL_RGB10_A2;
		format = GL_RGBA;
		break;
	case ColorFormat::R8:
		internalFormat = GL_R8;
		format = GL_RED;
		break;
	case ColorFormat::RG8:
		internalFormat = GL_RG8;
		format = GL_RG;
		break;
	case ColorFormat::RGB8:
		internalFormat = GL_RGB8;
		format = GL_RGB;
		break;
	case ColorFormat::RGBA8:
		internalFormat = GL_RGBA8;
		format = GL_RGBA;
		break;
	case ColorFormat::R16:
		internalFormat = GL_R16F;
		format = GL_RED;
		break;
	case ColorFormat::RG16:
		internalFormat = GL_RG16F;
		format = GL_RG;
		break;
	case ColorFormat::RGB16:
		internalFormat = GL_RGB16F;
		format = GL_RGB;
		break;
	case ColorFormat::RGBA16:
		internalFormat = GL_RGBA16F;
		format = GL_RGBA;
		break;
	case ColorFormat::RGB32:
		internalFormat = GL_RGB32F;
		format = GL_RGBA;
		break;
	case ColorFormat::RGBA32:
		internalFormat = GL_RGBA32F;
		format = GL_RGBA;
		break;
	default:
		GS_ASSERT_LOG("Invalid color format value.");
	};
}

void Grindstone::GraphicsAPI::TranslateDepthFormatToOpenGL(DepthFormat inFormat, GLenum& format, GLint& internalFormat) {
	switch (inFormat) {
	case DepthFormat::D16:
		internalFormat = GL_DEPTH_COMPONENT16;
		format = GL_DEPTH_COMPONENT;
		break;
	case DepthFormat::D24:
		internalFormat = GL_DEPTH_COMPONENT24;
		format = GL_DEPTH_COMPONENT;
		break;
	case DepthFormat::D32:
		internalFormat = GL_DEPTH_COMPONENT32F;
		format = GL_DEPTH_COMPONENT;
		break;
	case DepthFormat::D24_STENCIL_8:
		internalFormat = GL_DEPTH24_STENCIL8;
		format = GL_DEPTH_COMPONENT;
		break;
	case DepthFormat::D32_STENCIL_8:
		internalFormat = GL_DEPTH32F_STENCIL8;
		format = GL_DEPTH_COMPONENT;
		break;
	default:
		GS_ASSERT_LOG("Invalid depth format value.");
	};
}

GLenum Grindstone::GraphicsAPI::TranslateCullModeToOpenGL(CullMode cullMode) {
	GLenum culls[] = {
		GL_NONE,
		GL_FRONT,
		GL_BACK,
		GL_FRONT_AND_BACK
	};

	uint8_t index = static_cast<uint8_t>(cullMode);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(culls) / sizeof(culls[0]), "Invalid cullMode value.");

	return culls[index];
}

GLuint Grindstone::GraphicsAPI::TranslatePolygonModeToOpenGL(PolygonFillMode mode) {
	constexpr GLenum modes[] = {
		GL_POINT,
		GL_LINE,
		GL_FILL
	};

	uint8_t index = static_cast<uint8_t>(mode);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(modes) / sizeof(modes[0]), "Invalid PolygonFillMode value.");

	return modes[index];
}

GLuint Grindstone::GraphicsAPI::TranslateGeometryTypeToOpenGL(GeometryType geometryType) {
	constexpr GLenum types[] = {
		GL_POINTS,
		GL_LINES,
		GL_LINE_STRIP,
		GL_LINE_LOOP,
		GL_TRIANGLE_STRIP,
		GL_TRIANGLE_FAN,
		GL_TRIANGLES,
		GL_LINES_ADJACENCY,
		GL_TRIANGLES_ADJACENCY,
		GL_TRIANGLE_STRIP_ADJACENCY,
		GL_PATCHES
	};

	uint8_t index = static_cast<uint8_t>(geometryType);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(types) / sizeof(types[0]), "Invalid geometryType value.");

	return types[index];
}

GLenum Grindstone::GraphicsAPI::TranslateBlendOpToOpenGL(BlendOperation op) {
	constexpr GLenum funcs[] = {
		GL_NONE,
		GL_FUNC_ADD,
		GL_FUNC_SUBTRACT,
		GL_FUNC_REVERSE_SUBTRACT,
		GL_MIN,
		GL_MAX,
		GL_NONE, // TODO: This should be GL_ZERO or something like that.
		GL_SRC_NV,
		GL_DST_NV,
		GL_SRC_OVER_NV,
		GL_DST_OVER_NV,
		GL_SRC_IN_NV,
		GL_DST_IN_NV,
		GL_SRC_OUT_NV,
		GL_DST_OUT_NV,
		GL_SRC_ATOP_NV,
		GL_DST_ATOP_NV,
		GL_XOR_NV,
		GL_MULTIPLY_KHR,
		GL_SCREEN_KHR,
		GL_OVERLAY_KHR,
		GL_DARKEN_KHR,
		GL_LIGHTEN_KHR,
		GL_COLORDODGE_KHR,
		GL_COLORBURN_KHR,
		GL_HARDLIGHT_KHR,
		GL_SOFTLIGHT_KHR,
		GL_DIFFERENCE_KHR,
		GL_EXCLUSION_KHR,
		GL_INVERT,
		GL_INVERT_RGB_NV,
		GL_LINEARDODGE_NV,
		GL_LINEARBURN_NV,
		GL_VIVIDLIGHT_NV,
		GL_LINEARLIGHT_NV,
		GL_PINLIGHT_NV,
		GL_HARDMIX_NV,
		GL_HSL_HUE_KHR,
		GL_HSL_SATURATION_KHR,
		GL_HSL_COLOR_KHR,
		GL_HSL_LUMINOSITY_KHR,
		GL_PLUS_NV,
		GL_PLUS_CLAMPED_NV,
		GL_PLUS_CLAMPED_ALPHA_NV,
		GL_PLUS_DARKER_NV,
		GL_MINUS_NV,
		GL_MINUS_CLAMPED_NV,
		GL_CONTRAST_NV,
		GL_INVERT_OVG_NV,
		GL_RED_NV,
		GL_GREEN_NV,
		GL_BLUE_NV
	};

	uint8_t index = static_cast<uint8_t>(op);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(funcs) / sizeof(funcs[0]), "Invalid BlendOperation value.");

	return funcs[index];
}

GLenum Grindstone::GraphicsAPI::TranslateBlendFactorToOpenGL(BlendFactor factor) {
	constexpr GLenum factors[] = {
		GL_ZERO,
		GL_ONE,
		GL_SRC_COLOR,
		GL_ONE_MINUS_SRC_COLOR,
		GL_DST_COLOR,
		GL_ONE_MINUS_DST_COLOR,
		GL_SRC_ALPHA,
		GL_ONE_MINUS_SRC_ALPHA,
		GL_DST_ALPHA,
		GL_ONE_MINUS_DST_ALPHA,
		GL_CONSTANT_COLOR,
		GL_ONE_MINUS_CONSTANT_COLOR,
		GL_CONSTANT_ALPHA,
		GL_ONE_MINUS_CONSTANT_ALPHA,
		GL_SRC_ALPHA_SATURATE,
		GL_SRC1_COLOR,
		GL_ONE_MINUS_SRC1_COLOR,
		GL_SRC1_ALPHA,
		GL_ONE_MINUS_SRC1_ALPHA
	};

	uint8_t index = static_cast<uint8_t>(factor);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(factors) / sizeof(factors[0]), "Invalid BlendFactor value.");

	return factors[index];
}

GLenum Grindstone::GraphicsAPI::TranslateCompareOpToOpenGL(CompareOperation op) {
	constexpr GLenum funcs[] = {
		GL_NEVER,
		GL_LESS,
		GL_EQUAL,
		GL_LEQUAL,
		GL_GREATER,
		GL_NOTEQUAL,
		GL_GEQUAL,
		GL_ALWAYS
	};

	uint8_t index = static_cast<uint8_t>(op);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(funcs) / sizeof(funcs[0]), "Invalid CompareOperation value.");

	return funcs[index];
}

GLenum Grindstone::GraphicsAPI::TranslateVertexFormatToOpenGL(VertexFormat format) {
	switch (format) {
		case VertexFormat::Float:
		case VertexFormat::Float2:
		case VertexFormat::Float3:
		case VertexFormat::Float4:
		case VertexFormat::Mat3:
		case VertexFormat::Mat4:	return GL_FLOAT;

		case VertexFormat::Int:
		case VertexFormat::Int2:
		case VertexFormat::Int3:
		case VertexFormat::Int4:	return GL_INT;

		case VertexFormat::UInt:
		case VertexFormat::UInt2:
		case VertexFormat::UInt3:
		case VertexFormat::UInt4:	return GL_UNSIGNED_INT;
		case VertexFormat::Bool:	return GL_BOOL;
	}

	GS_ASSERT_LOG("Invalid VertexFormat!");

	return 0;
}
