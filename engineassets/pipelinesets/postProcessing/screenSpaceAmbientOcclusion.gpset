include "$ENGINE/pipelinesets/common/matrixTransformations.gpset"
include "$ENGINE/pipelinesets/common/postProcessingTemplate.gpset"

pipelineSet "Screen-Space Ambient Occlusion" inherits "PostProcessing" {
	configuration "main" {
		pass "main" {
			shaderEntrypoint: vertex mainVertex
			shaderEntrypoint: fragment mainFragment
			renderQueue: "Ssao"

			properties {
				cull: back
				depthBias: false
				depthWrite: false
				depthTest: false
				depthClamp: false
				depthCompareOp: lessOrEqual
				attachments: {
					colorMask: rgba
					blendPreset: opaque
				}
			}

			requiresBlocks [
				GsInvertMatrix,
				GsViewNormal,
				GsComputeClipSpacePosition,
				GsComputeViewSpacePosition
			]

			shaderHlsl {
				static const int kernelSize = 64;

				SamplerState gbufferSampler : register(s1, space0);
				Texture2D<float4> depthTexture : register(t2,  space0);
				Texture2D<float4> gbufferNormals : register(t3,  space0);

				struct SSAOBufferObject {
					float4 kernels[kernelSize];
					float radius;
					float bias;
				};

				SamplerState ssaoNoiseSampler : register(s0, space1);
				Texture2D<float4> ssaoNoise : register(t1,  space1);
				ConstantBuffer<SSAOBufferObject> ssaoUbo : register(b2, space1);

				float mainFragment(VertexToFragment input) : SV_TARGET0 {
					int2 noiseScale = int2(rendererUbo.renderResolution.x, rendererUbo.renderResolution.y) / 4;

					float depthFromTexture = depthTexture.Sample(gbufferSampler, input.scaledFragmentTexCoord).x;
					float3 position = ComputeViewSpacePosition(InvertMatrix(rendererUbo.projectionMatrix), rendererUbo.viewMatrix, input.fragmentTexCoord, depthFromTexture).rgb;
					float3 normal = ViewNormal(rendererUbo.viewMatrix, gbufferNormals.Sample(gbufferSampler, input.scaledFragmentTexCoord).rgb);
					float2 noise = ssaoNoise.Sample(ssaoNoiseSampler, input.fragmentTexCoord * noiseScale).rg;
					float3 randomVec  = float3(noise, 0);

					float3 tangent   = normalize(randomVec - normal * dot(randomVec, normal));
					float3 bitangent = cross(tangent, normal);
					float3x3 TBN       = float3x3(tangent, bitangent, normal);

					float occlusion = 0.0;

					float radius = ssaoUbo.radius;
					float bias = ssaoUbo.bias;

					for(int i = 0; i < kernelSize; i++) {
						float3 sampleKernel = mul(TBN, ssaoUbo.kernels[i].xyz);
						sampleKernel = position + sampleKernel * radius;

						float4 offset = float4(sampleKernel, 1.0);
						offset      = mul(rendererUbo.projectionMatrix, offset);// from view to clip-space
						offset.xyz /= offset.w;									// perspective divide
						offset.xyz  = offset.xyz * 0.5 + float3(0.5, 0.5, 0.5);	// transform to range 0.0 - 1.0

						float sampleDepth = depthTexture.Sample(gbufferSampler, offset.xy * rendererUbo.renderScale).x;
						float sampleDepthLinear = ComputeViewSpacePosition(InvertMatrix(rendererUbo.projectionMatrix), rendererUbo.viewMatrix, offset.xy, sampleDepth).z;
						float rangeCheck = smoothstep(0.0, 1.0, radius / abs(position.z - sampleDepthLinear));
						occlusion += (sampleDepthLinear >= sampleKernel.z + bias ? 1.0 : 0.0) * rangeCheck;
					}

					return 1.0 - (occlusion / kernelSize);
				}
			}
		}
	}
}
