include "$ENGINE/pipelinesets/common/rendererUniform.gpset"

pipelineSet "Gizmo" {
	configuration "main" {
		pass "main" {
			shaderEntrypoint: vertex mainVertex
			shaderEntrypoint: fragment mainFragment

			properties {
				cull: back
				depthBias: false
				depthWrite: false
				depthTest: false
				depthClamp: false
				depthCompareOp: lessOrEqual
			}

			requiresBlocks [
				GsRendererUniform
			]

			shaderHlsl {
				struct Element {
					float4x4 matrix;
					float4 color;
				};

				#define maxObjects 500

				struct Ubo {
					Element elements[maxObjects];
				};

				cbuffer ubo : register(b0, space0) { Ubo ubo; }

				struct VertexInput {
					[[vk::location(0)]] float3 position : POSITION0;
				};

				struct VertexToFragment {
					float4 position : SV_Position;
					[[vk::location(0)]] float4 color : COLOR0;
				};

				VertexToFragment mainVertex(VertexInput input, uint instanceID : SV_InstanceID) {
					VertexToFragment output = (VertexToFragment)0;
					output.position = mul(ubo.elements[instanceID].matrix, float4(input.position, 1.0));
					output.color = ubo.elements[instanceID].color;
					return output;
				}

				float4 mainFragment(VertexToFragment input) : SV_TARGET0 {
					return input.color;
				}
			}
		}
	}
}
