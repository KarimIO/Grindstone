include "$ENGINE/pipelinesets/deferredPipeline/lightingTemplate.gpset"

pipelineSet "Point Light" inherits "DeferredLighting" {
	configuration "main" {
		pass "main" {
			shaderEntrypoint: fragment mainFragment

			requiresBlocks [
				GsRendererUniform,
				CommonConstants,
				BSDF,
				LightGbufferUniforms,
				DiffuseDisney,
				GsComputeWorldSpacePosition
			]

			shaderHlsl {
				struct LightUbo {
					float3 color;
					float attenuationRadius;
					float3 position;
					float intensity;
				};

				cbuffer light : register(b0, space0) { LightUbo light; }

				float3 LightPointCalc(
					in float3 albedo,
					in float3 position,
					in float3 specularTexture,
					in float roughness,
					in float3 normal,
					in float3 lightPos,
					in float lightRadius,
					in float3 lightColor,
					in float3 eyePos
				) {
					float3 lightDir	= position - lightPos;
					float lightDistance	= length(lightDir);

					float3 eyeDir		= normalize(eyePos - position);
					float3 eyeReflect = reflect(-eyeDir, normal);

					lightDir		= -normalize(lightDir);

					float alpha = roughness * roughness;
					float alphaSqr = alpha * alpha;

					float NL = clamp(dot(normal, lightDir), 0, 1);

					float distSqr = lightDistance * lightDistance;
					float lightRadiusSqr = lightRadius * lightRadius;
					float attenuationFactor = distSqr / lightRadiusSqr;
					float attenuation = clamp(1 - attenuationFactor * attenuationFactor, 0, 1);
					attenuation = attenuation * attenuation / (distSqr + 0.0001);

					float3 H = normalize(eyeDir + lightDir);

					float NV = abs(dot(normal, eyeDir)) + 0.00001;
					float NH = clamp(dot(normal, H), 0, 1);
					float LH = clamp(dot(lightDir, H), 0, 1);
					float VH = clamp(dot(eyeDir, H), 0, 1);

					float3 specular = BSDF(NV, NL, LH, NH, alpha, specularTexture.rgb);
					float diffDisney = DiffuseDisney(NV, NL, LH, roughness);
					float3 diffuse = albedo.rgb * float3(diffDisney, diffDisney, diffDisney) / PI;

					float3 lightModifier = lightColor.xyz * attenuation;
					float3 BSDFValue = diffuse + specular;
					return float3(NL * BSDFValue * lightModifier);
				}

				float4 mainFragment(VertexToFragment input) : SV_TARGET0 {
					float4 gbuffer3Value = gbuffer3.Sample(mySampler, input.scaledFragmentTexCoord);

					float depth = gbuffer0.Sample(mySampler, input.scaledFragmentTexCoord).r;
					float3 position = ComputeWorldSpacePosition(rendererUbo.projectionMatrix, rendererUbo.viewMatrix, input.fragmentTexCoord, depth);
					float3 diffuse = gbuffer1.Sample(mySampler, input.scaledFragmentTexCoord).rgb;
					float3 normal = gbuffer2.Sample(mySampler, input.scaledFragmentTexCoord).rgb;
					float3 specular = gbuffer3Value.rgb;
					float roughness = gbuffer3Value.a;

					/*float near = 0.1;
					float far = 100;
					float projectionA = far / (far - near);
					float projectionB = (-far * near) / (far - near);
					float3 position = fragmentViewRay * depth;*/

					float3 lightPow = light.color * light.intensity;
					float3 litValues = LightPointCalc(diffuse, position, specular, roughness, normal, light.position, light.attenuationRadius, lightPow, rendererUbo.eyePos);

					return float4(litValues, 1);
				}
			}
		}
	}
}
