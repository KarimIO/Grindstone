include "$ENGINE/pipelinesets/common/meshRenderer.gpset"
include "$ENGINE/pipelinesets/common/matrixTransformations.gpset"
include "$ENGINE/pipelinesets/common/defaultSampler.gpset"

pipelineSet "Skybox (Cubemap)" {
	parameters {
		Texture skybox : TextureCube.skyCube
	}

	configuration "main" {
		rendererTags: "deferred"

		pass "main" {
			shaderEntrypoint: vertex mainVertex
			shaderEntrypoint: fragment mainFragment
			renderQueue: "GeometrySky"

			properties {
				cull: back
				depthBias: 1.25, 1.75, 0.0
				depthWrite: true
				depthTest: true
				depthClamp: false
				depthCompareOp: lessOrEqual
				attachments: {
					colorMask: rgba
					blendPreset: opaque
				}
			}

			requiresBlocks [
				GsRendererUniform,
				GsDefaultSampler,
				GsPadFloat33ToFloat44
			]

			shaderHlsl {
				TextureCube<float4> skybox : register(t1, space2);

				struct VertexInput {
					[[vk::location(0)]] float3 position : POSITION0;
				};

				struct VertexToFragment {
					float4 position : SV_Position;
					[[vk::location(0)]] float3 texCoord : TEXCOORD0;
				};

				VertexToFragment mainVertex(VertexInput input) {
					VertexToFragment output;

					output.texCoord = normalize(input.position);

					float4x4 viewMatrixWithoutPos = PadFloat33ToFloat44((float3x3)rendererUbo.viewMatrix);
					output.position = mul(mul(float4(output.texCoord, 1.0), viewMatrixWithoutPos), rendererUbo.projectionMatrix);
					output.position = output.position.xyww;
					return output;
				}

				float4 mainFragment(VertexToFragment input) : SV_TARGET {
    				return skybox.SampleLevel(defaultSampler, input.texCoord, 0);
				}
			}
		}
	}
}
