#version 450

#extension GL_ARB_separate_shader_objects : enable

layout(location = 0) out vec4 position;
layout(location = 1) out vec4 normal;
layout(location = 2) out vec4 albedo;
layout(location = 3) out vec4 specular;

layout(set=1, binding = 0) uniform sampler2D tex0;
layout(set=1, binding = 1) uniform sampler2D tex1;
layout(set=1, binding = 2) uniform sampler2D tex2;
layout(set=1, binding = 3) uniform sampler2D tex3;

layout(location = 0) in vec2 TexCoord0;
layout(location = 1) in vec3 Position;
layout(location = 2) in vec3 Normal;
layout(location = 3) in vec3 Tangent;

vec3 CalcBumpedNormal(vec3 Ng, vec3 Nt, vec3 Tan) {
  vec3 BumpMapNormal = Nt;
  if (BumpMapNormal == vec3(0))
    return Ng;

  vec3 NewNormal = normalize(Ng);
  vec3 NewTangent = normalize(Tan);
  NewTangent = normalize(NewTangent - dot(NewTangent, NewNormal) * NewNormal);
  vec3 Bitangent = cross(NewTangent, NewNormal);
  BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
  BumpMapNormal = vec3(-BumpMapNormal.xy, BumpMapNormal.z);
  mat3 TBN = mat3(NewTangent, Bitangent, NewNormal);
  return normalize(TBN * BumpMapNormal);
}

void main() {
  vec3 Albedo = texture(tex0, TexCoord0).rgb;
  vec3 NormalTex = texture(tex1, TexCoord0).rgb;
  vec3 Specular = texture(tex2, TexCoord0).rgb; // Specular
  float Roughness = texture(tex3, TexCoord0).r; // Roughness
  
  position = vec4(Position,0);
  normal = vec4(CalcBumpedNormal(Normal, NormalTex, Tangent), 0);
  albedo = vec4(Albedo, 0);
  specular = vec4(Specular, Roughness);
}