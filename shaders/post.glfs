#version 410 core

out vec3 color; 

uniform sampler2D texPosition;
uniform sampler2D texNormals;
uniform sampler2D texDeferLit;

in vec2 UV;

const int kernelSize = 32;

float rand(float coeff) {
    return fract(coeff * sin(dot(UV.xy ,vec2(12.9898,78.233))) * 43758.5453);
}

float randBetween(float seed, float high, float low) {
    return (rand(seed) / (high-low)) + low;
}

void main() {
    vec3 position = texture(texPosition, UV).rgb;
    vec3 normals = texture(texNormals, UV).rgb;

    vec3 kernels[kernelSize];
    for (int i = 0; i < kernelSize; i++) {
        kernels[i] = normalize(vec3(
            randBetween(3.12, -1, 1),
            randBetween(7.53, -1, 1),
            randBetween(1.54,  0, 1)));
        kernels[i] *= randBetween(5.123, 0, 1);

        float scale = float(i) / float(kernelSize);
        scale = mix(0.1f, 1.0f, scale * scale);
        kernels[i] *= scale;
    }
    
    color = kernels[0].rgb;
}