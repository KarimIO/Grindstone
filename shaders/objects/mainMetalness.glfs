#version 140

vec2 OctWrap( vec2 v )
{
    return ( 1.0 - abs( v.yx ) ) * ( vec2(v.x >= 0.0 ? 1.0 : -1.0, v.y >= 0.0 ? 1.0 : -1.0) );
}
 
vec2 Encode( vec3 n )
{
    n /= ( abs( n.x ) + abs( n.y ) + abs( n.z ) );
    n.xy = (n.z >= 0.0) ? n.xy : OctWrap( n.xy );
    n.xy = n.xy * 0.5 + 0.5;
    return n.xy;
}

//layout(location = 0) out vec4 position; // X Y Z MaterialType
//layout(location = 1) out vec4 normal;	// X Y Z AO
//layout(location = 2) out vec4 albedo; // R G B Metalness
//layout(location = 3) out vec4 specular; // R G B Metalness
out vec4 position; // X Y Z MaterialType
out vec4 normal;	// X Y Z AO
out vec4 albedo; // R G B Metalness
out vec4 specular; // R G B Metalness

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;

in vec2 TexCoord0;
in vec3 Position;
in vec3 Normal;
in vec3 Tangent;

vec3 CalcBumpedNormal(vec3 Ng, vec3 Nt, vec3 Tan) {
  vec3 BumpMapNormal = Nt;
  if (BumpMapNormal == vec3(0))
  return Ng;
  vec3 NewNormal = normalize(Ng);
  vec3 NewTangent = normalize(Tan);
  NewTangent = normalize(NewTangent - dot(NewTangent, NewNormal) * NewNormal);
  vec3 Bitangent = cross(NewTangent, NewNormal);
  BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
  BumpMapNormal = vec3(-BumpMapNormal.xy, BumpMapNormal.z);
  mat3 TBN = mat3(NewTangent, Bitangent, NewNormal);
  return normalize(TBN * BumpMapNormal);
}

void main() {
  vec3 Albedo = texture(tex0, TexCoord0).rgb;
  vec3 NormalTex = texture(tex1, TexCoord0).rgb;
  float Metalness = texture(tex2, TexCoord0).r; // Metalness
  float Roughness = texture(tex3, TexCoord0).r; // Roughness
  
  position = vec4(Position,0);
  normal = vec4(Encode(CalcBumpedNormal(Normal, NormalTex, Tangent)), 0, 0);
  albedo = vec4(mix(Albedo, vec3(0), Metalness), 0);
  specular = vec4(mix(vec3(0.04), Albedo, Metalness), Roughness);
}