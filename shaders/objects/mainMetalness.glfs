#version 140

//layout(location = 0) out vec4 position; // X Y Z MaterialType
//layout(location = 1) out vec4 normal;	// X Y Z AO
//layout(location = 2) out vec4 albedo; // R G B Metalness
//layout(location = 3) out vec4 specular; // R G B Metalness
out vec4 position; // X Y Z MaterialType
out vec4 normal;	// X Y Z AO
out vec4 albedo; // R G B Metalness
out vec4 specular; // R G B Metalness

uniform sampler2D tex0;
uniform sampler2D tex1;
uniform sampler2D tex2;
uniform sampler2D tex3;

in vec2 TexCoord0;
in vec3 Position;
in vec3 Normal;
in vec3 Tangent;

vec2 encodeNormals(vec3 n) {
    /*vec2 enc = normalize(normals.xy) * (sqrt(-normals.z*0.5+0.5));
    enc = enc*0.5+0.5;
    return enc;*/
    
    float f = sqrt(8*n.z+8);
    return n.xy / f + 0.5;
}

vec3 CalcBumpedNormal(vec3 Ng, vec3 Nt, vec3 Tan) {
  vec3 BumpMapNormal = Nt;
  if (BumpMapNormal == vec3(0))
  return Ng;
  vec3 NewNormal = normalize(Ng);
  vec3 NewTangent = normalize(Tan);
  NewTangent = normalize(NewTangent - dot(NewTangent, NewNormal) * NewNormal);
  vec3 Bitangent = cross(NewTangent, NewNormal);
  BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
  BumpMapNormal = vec3(-BumpMapNormal.xy, BumpMapNormal.z);
  mat3 TBN = mat3(NewTangent, Bitangent, NewNormal);
  return normalize(TBN * BumpMapNormal);
}

void main() {
  vec3 Albedo = texture2D(tex0, TexCoord0).rgb;
  vec3 NormalTex = texture2D(tex1, TexCoord0).rgb;
  float Metalness = texture2D(tex2, TexCoord0).r; // Metalness
  float Roughness = texture2D(tex3, TexCoord0).r; // Roughness
  
  position = vec4(Position,0);
  normal = vec4(encodeNormals(CalcBumpedNormal(Normal, NormalTex, Tangent)), 0, 0);
  albedo = vec4(mix(Albedo, vec3(0), Metalness), 0);
  specular = vec4(mix(vec3(0.04), Albedo, Metalness), Roughness);
}