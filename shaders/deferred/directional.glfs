#version 410 core

//layout(location = 0) out vec4 colorOut;
out vec4 colorOut;

uniform sampler2D gbuffer0;
uniform sampler2D gbuffer1;
uniform sampler2D gbuffer2;
uniform sampler2D gbuffer3;
uniform vec3 lightColor;
uniform float lightIntensity;
uniform float lightSourceRadius;
uniform vec3 lightDirection;
uniform vec3 eyePos;

uniform sampler2D lightShadow;
uniform mat4 shadowMatrix;

#include ../shaders/light.is

void main() {
	vec2 UV			=  gl_FragCoord.xy.xy/vec2(1366, 768);

	vec4 Position	= texture(gbuffer0, UV);
	vec4 Normal		= texture(gbuffer1, UV);
	vec4 Albedo		= texture(gbuffer2, UV);
	vec4 Specular	= texture(gbuffer3, UV);
	float alpha = Specular.a * Specular.a;
	
	vec3 lightDir = vec3(0,1,0);
	vec3 eyeDir = normalize(eyePos - Position.xyz);
	vec3 eyeReflect = reflect(-eyeDir, Normal.xyz);
	
	float sunAngularRadius = 0.1963f;
	float r = sin( sunAngularRadius );
	float d = cos( sunAngularRadius );

	float NL = clamp(dot(Normal.xyz, lightDirection), 0, 1);
	vec3 H = normalize(eyeDir + lightDirection);
	float NV = abs(dot(Normal.xyz, eyeDir)) + 0.00001;
	float NH = clamp(dot(Normal.xyz, H), 0, 1);
	float LH = clamp(dot(lightDirection, H), 0, 1);

	float sunIlluminanceInLux = lightIntensity;
	
	vec3 depthmapPos = (shadowMatrix * vec4(Position.xyz,1)).xyz;
	float bias = 0.005;
	float visibility = 1.0;
	if (depthmapPos.x >= 0 && depthmapPos.x <= 1 && depthmapPos.y >= 0 && depthmapPos.y <= 1) {
		if ( texture( lightShadow, depthmapPos.xy ).z  <  (depthmapPos.z - bias)) {
			visibility = 0;
		}
	}

	float DdotR = dot (lightDirection , eyeReflect );
	vec3 S = eyeReflect - DdotR * lightDirection;
	vec3 L = (DdotR < d) ? normalize(d * lightDirection + normalize(S) * r) : eyeReflect;
	vec3 illuminance = BSDF(NV, NL, LH, NH, alpha, Specular.rgb);
	illuminance *= sunIlluminanceInLux * NL; // illuminance
	colorOut = vec4(visibility * Albedo.rgb, 1);
	colorOut = vec4(linearToSRGB(colorOut.rgb), colorOut.a);
}