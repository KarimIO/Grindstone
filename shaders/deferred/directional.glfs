#version 140

//layout(location = 0) out vec4 colorOut;
out vec3 colorOut;

uniform sampler2D gbuffer0;
uniform sampler2D gbuffer1;
uniform sampler2D gbuffer2;
uniform sampler2D gbuffer3;
uniform vec3 lightColor;
uniform float lightIntensity;
uniform float lightSourceRadius;
uniform vec3 lightDirection;
uniform vec3 eyePos;

uniform sampler2D lightShadow;
uniform mat4 shadowMatrix;

in vec2 UV;

#include ../shaders/light.is
#include ../shaders/decode.is

float ShadowCalculation(vec4 fragPosLightSpace, float NL) {
	float bias = 0.005; //max(0.05 * (1.0 - NL), 0.005);
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    float currentDepth = projCoords.z;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(lightShadow, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(lightShadow, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	
	shadow = (projCoords.z > 1.0) ? (0.0) : (shadow/9.0);

    return shadow;
}

void main() {
	vec4 gbuffer0Val = texture(gbuffer0, UV);
	vec4 gbuffer1Val = texture(gbuffer1, UV);
	vec4 gbuffer2Val = texture(gbuffer2, UV);
	vec4 gbuffer3Val = texture(gbuffer3, UV);

	vec3 Position	= WorldPosFromDepth(gbuffer0Val.r, UV);
	vec3 Normal		= decodeNormal(gbuffer1Val.rgb);
	vec4 Albedo		= gbuffer2Val;
	vec4 Specular	= gbuffer3Val;
	float alpha = Specular.a * Specular.a;
	
	vec3 eyeDir = normalize(eyePos - Position.xyz);
	vec3 eyeReflect = reflect(-eyeDir, Normal.xyz);
	
	float sunAngularRadius = 0.1963f;
	float r = sin( sunAngularRadius );
	float d = cos( sunAngularRadius );

	float NL = clamp(dot(Normal.xyz, lightDirection), 0, 1);
	//For Debugging Terrain
	//if (NL < 0.8) NL = 0;
	vec3 H = normalize(eyeDir + lightDirection);
	float NV = abs(dot(Normal.xyz, eyeDir)) + 0.00001;
	float NH = clamp(dot(Normal.xyz, H), 0, 1);
	float LH = clamp(dot(lightDirection, H), 0, 1);

	float sunIlluminanceInLux = lightIntensity;
	
	vec4 depthmapPos = (shadowMatrix * vec4(Position.xyz,1));
	float shadow = ShadowCalculation(depthmapPos, dot(Normal, lightDirection));

	float DdotR = dot (lightDirection , eyeReflect );
	vec3 S = eyeReflect - DdotR * lightDirection;
	vec3 L = (DdotR < d) ? normalize(d * lightDirection + normalize(S) * r) : eyeReflect;
	vec3 illuminance = BSDF(NV, NL, LH, NH, alpha, Specular.rgb);
	illuminance += Albedo.rgb*vec3(Diff_Disney(NV, NL, LH, alpha))/pi;
	illuminance *= sunIlluminanceInLux * NL; // illuminance
	colorOut = (1.0 - shadow) * illuminance;
	colorOut = hdrGammaTransform(colorOut.rgb);
}