#version 140

//layout(location = 0) out vec4 colorOut;
out vec3 colorOut;

uniform sampler2D gbuffer0;
uniform sampler2D gbuffer1;
uniform sampler2D gbuffer2;
uniform sampler2D gbuffer3;
uniform vec3 lightColor;
uniform float lightIntensity;
uniform float lightAttenuationRadius;
uniform vec3 lightPosition;
uniform vec3 eyePos;

uniform float lightInnerAngle;
uniform float lightOuterAngle;
uniform vec3 lightDirection;
uniform vec2 resolution;

uniform sampler2D lightShadow;
uniform mat4 shadowMatrix;

#include ../shaders/light.is

void main() {
	vec2 UV			=  gl_FragCoord.xy/vec2(resolution.x, resolution.y);

	vec4 Position	= texture(gbuffer0, UV);
	vec4 Normal		= texture(gbuffer1, UV);
	vec4 Albedo		= texture(gbuffer2, UV);
	vec4 Specular	= texture(gbuffer3, UV);

	float lightRadius = 24;
	vec3 lightPow = lightColor * lightIntensity;
	float strength = length(Position.xyz-lightPosition);
	strength = strength/lightAttenuationRadius;
	strength = max(0, 1-strength);
	colorOut = LightPointCalc(Albedo.rgb, Position.xyz, Specular, Normal.xyz, lightPosition, lightAttenuationRadius, lightPow, eyePos);
	
	vec3 lightDir = normalize(Position.xyz-lightPosition);

	vec4 depthmapPos = (shadowMatrix * vec4(Position.xyz,1));
	float bias = max(0.05 * (1.0 - dot(Normal.xyz, lightDir)), 0.005);  
	float shadow = 0;
	vec2 ShadowCoord = depthmapPos.xy/depthmapPos.w;
	vec2 texelSize = 1.0 / textureSize(lightShadow, 0);
	float pcfDepth = texture(lightShadow, ShadowCoord.xy).r; 
	shadow = (depthmapPos.z - bias)/depthmapPos.w > pcfDepth ? 1.0 : 0.0;  

	float maxDot = cos(lightInnerAngle);
	float minDot = cos(lightOuterAngle);
	float dotPR = dot(lightDir, lightDirection);
	dotPR = clamp((dotPR-minDot)/(maxDot-minDot), 0, 1);
	if (dotPR > 0) {
		colorOut = hdrGammaTransform((1-shadow)*colorOut.rgb)*dotPR;
	}
	else {
		colorOut = vec3(0,0,0);
	}
}