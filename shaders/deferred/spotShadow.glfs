#version 140

//layout(location = 0) out vec4 colorOut;
out vec3 colorOut;

uniform sampler2D gbuffer0;
uniform sampler2D gbuffer1;
uniform sampler2D gbuffer2;
uniform sampler2D gbuffer3;
uniform vec3 lightColor;
uniform float lightIntensity;
uniform float lightAttenuationRadius;
uniform vec3 lightPosition;
uniform vec3 eyePos;

uniform float lightInnerAngle;
uniform float lightOuterAngle;
uniform vec3 lightDirection;
uniform vec2 resolution;

uniform sampler2D lightShadow;
uniform mat4 shadowMatrix;

#include ../shaders/light.is
#include ../shaders/decode.is

float ShadowCalculation(vec4 fragPosLightSpace, float NL) {
	float bias = 0.005; //max(0.05 * (1.0 - NL), 0.005);
    vec3 projCoords = fragPosLightSpace.xyz / fragPosLightSpace.w;
    float currentDepth = projCoords.z;

	float shadow = 0.0;
	vec2 texelSize = 1.0 / textureSize(lightShadow, 0);
	for(int x = -1; x <= 1; ++x)
	{
		for(int y = -1; y <= 1; ++y)
		{
			float pcfDepth = texture(lightShadow, projCoords.xy + vec2(x, y) * texelSize).r; 
			shadow += currentDepth - bias > pcfDepth ? 1.0 : 0.0;        
		}    
	}
	
	shadow = (projCoords.z > 1.0) ? (0.0) : (shadow/9.0);

    return shadow;
}

void main() {
	vec2 UV			=  gl_FragCoord.xy/vec2(resolution.x, resolution.y);

	vec4 gbuffer0Val = texture(gbuffer0, UV);
	vec4 gbuffer1Val = texture(gbuffer1, UV);
	vec4 gbuffer2Val = texture(gbuffer2, UV);
	vec4 gbuffer3Val = texture(gbuffer3, UV);

	vec3 Position	= WorldPosFromDepth(gbuffer0Val.r, UV);
	vec3 Normal		= decodeNormal(gbuffer1Val.rgb);
	vec4 Albedo		= gbuffer2Val;
	vec4 Specular	= gbuffer3Val;

	float lightRadius = 24;
	vec3 lightPow = lightColor * lightIntensity;
	float strength = length(Position.xyz-lightPosition);
	strength = strength/lightAttenuationRadius;
	strength = max(0, 1-strength);
	colorOut = LightPointCalc(Albedo.rgb, Position.xyz, Specular, Normal.xyz, lightPosition, lightAttenuationRadius, lightPow, eyePos);
	
	vec3 lightDir = normalize(Position.xyz-lightPosition);

	vec4 depthmapPos = (shadowMatrix * vec4(Position.xyz,1));
	float shadow = ShadowCalculation(depthmapPos, dot(Normal, lightDirection));

	float maxDot = cos(lightInnerAngle);
	float minDot = cos(lightOuterAngle);
	float dotPR = dot(lightDir, lightDirection);
	dotPR = clamp((dotPR-minDot)/(maxDot-minDot), 0, 1);
	if (dotPR > 0) {
		colorOut = hdrGammaTransform((1.0-shadow)*colorOut.rgb)*dotPR;
	}
	else {
		colorOut = vec3(0,0,0);
	}
}