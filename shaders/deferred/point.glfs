#version 140

//layout(location = 0) out vec4 colorOut;
out vec3 colorOut;

uniform sampler2D gbuffer0;
uniform sampler2D gbuffer1;
uniform sampler2D gbuffer2;
uniform sampler2D gbuffer3;
uniform vec3 lightColor;
uniform float lightIntensity;
uniform float lightAttenuationRadius;
uniform vec3 lightPosition;
uniform vec3 eyePos;
uniform vec2 resolution;

#include ../shaders/light.is

void main() {
	vec2 UV			=  gl_FragCoord.xy/vec2(resolution.x, resolution.y);

	vec4 Position	= texture(gbuffer0, UV);
	vec4 Normal		= texture(gbuffer1, UV);
	vec4 Albedo		= texture(gbuffer2, UV);
	vec4 Specular	= texture(gbuffer3, UV);

	float lightRadius = 24;
	vec3 lightPow = lightColor * lightIntensity;
	vec3 lightDir = normalize(Position.xyz-lightPosition);
	colorOut = LightPointCalc(Albedo.rgb, Position.xyz, Specular, Normal.xyz, lightPosition, lightAttenuationRadius, lightPow, eyePos);
	colorOut = hdrGammaTransform(colorOut.rgb);
}