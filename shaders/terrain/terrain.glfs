#version 140

//layout(location = 0) out vec4 position; // X Y Z MaterialType
//layout(location = 1) out vec4 normal;	// X Y Z AO
//layout(location = 2) out vec4 albedo; // R G B Metalness
//layout(location = 3) out vec4 specular; // R G B Metalness
out vec4 position; // X Y Z MaterialType
out vec4 normal;	// X Y Z AO
out vec4 albedo; // R G B Metalness
out vec4 specular; // R G B Metalness

in vec3 WorldPos_FS;
in vec2 TexCoord0_FS;
in vec3 Normal_FS;
in vec3 Tangent_FS;

uniform float height;
uniform float time;

uniform sampler2D terrainMap;

uniform sampler2D grassAlbedo;
uniform sampler2D grassGeometry;

/*vec4 TriNormalMapping(sampler2D texIn, vec3 blending) {
    float scale = 2;
    vec4 xaxis = texture( texIn, WorldPos_FS.yz * scale);
    vec4 yaxis = texture( texIn, WorldPos_FS.xz * scale);
    vec4 zaxis = texture( texIn, WorldPos_FS.xy * scale);
    return xaxis * blending.x + yaxis * blending.y + zaxis * blending.z;
}

vec3 CalcBumpedNormal(vec3 Ng, vec3 Nt, vec3 Tan) {
  vec3 BumpMapNormal = Nt;
  if (BumpMapNormal == vec3(0))
  return Ng;
  vec3 NewNormal = normalize(Ng);
  vec3 NewTangent = normalize(Tan);
  NewTangent = normalize(NewTangent - dot(NewTangent, NewNormal) * NewNormal);
  vec3 Bitangent = cross(NewTangent, NewNormal);
  BumpMapNormal = 2.0 * BumpMapNormal - vec3(1.0, 1.0, 1.0);
  BumpMapNormal = vec3(-BumpMapNormal.xy, BumpMapNormal.z);
  mat3 TBN = mat3(NewTangent, Bitangent, NewNormal);
  return normalize(TBN * BumpMapNormal);
}*/

void main() {
    /*vec3 blending = abs( Normal_FS );
    blending = normalize(max(blending, 0.00001)); // Force weights to sum to 1.0
    float b = (blending.x + blending.y + blending.z);
    blending /= vec3(b, b, b);

    vec4 texAlbedo = TriNormalMapping(grassAlbedo, blending);
    vec4 texGeometry = TriNormalMapping(grassGeometry, blending);*/

    /*vec3 Normal = Normal_FS; // CalcBumpedNormal(Normal_FS, texGeometry.xyz, Tangent_FS)
    vec3 Albedo = vec3(1,1,1);
    float Roughness = 0.8;
    
    float Slope = acos(Normal_FS.y);
    float SlopeMin = 0.25f;
    float SlopeMax = 0.5f;
    float SlopeMixer = (Slope-SlopeMin)/(SlopeMax-SlopeMin);

    float Height = WorldPos_FS.y / height;
    float HeightMax = 0.7+SlopeMixer*0.1;
    float HeightMin = 0.6+SlopeMixer*0.09;
    float HeightMixer = (Height-HeightMin)/(HeightMax-HeightMin);

    if (Height < HeightMin)
        Albedo = vec3(0.4,0.63,0.266);
    else if (Height < HeightMax)
        Albedo = mix(vec3(0.4,0.63,0.266), vec3(0.95, 0.96, 1), HeightMixer);
    else
        Albedo = vec3(0.95, 0.96, 1);

    if (Slope > SlopeMax)
        Albedo = vec3(0.28, 0.266, 0.266);
    else if (Slope < SlopeMax)
        Albedo = mix(Albedo, vec3(0.28, 0.266, 0.266), SlopeMixer);

    position = vec4(WorldPos_FS, 1);
    albedo = vec4(Albedo,1);
    normal = vec4(Normal, 1);
    specular = vec4(0.04, 0.04, 0.04, Roughness);*/

    position = vec4(WorldPos_FS, 1);
    albedo = vec4(texture(terrainMap, TexCoord0_FS).aaa, 1);
    normal = vec4(0, 1, 0, 1);
    specular = vec4(0.04, 0.04, 0.04, 0.5);
}