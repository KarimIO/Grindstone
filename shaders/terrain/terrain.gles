#version 410 core

layout (triangles, equal_spacing, ccw) in;
uniform mat4 gVP;
uniform sampler2D terrainMap;
uniform float height;

in vec2 TexCoord0_ES[];
out vec3 WorldPos_FS;
out vec2 TexCoord0_FS;
out vec3 Normal_FS;
out vec3 Tangent_FS;

vec2 interpolate2D(vec2 v0, vec2 v1, vec2 v2) {
   	return vec2(gl_TessCoord.x) * v0 + vec2(gl_TessCoord.y) * v1 + vec2(gl_TessCoord.z) * v2;
}

vec3 GenerateTangent(vec3 Norm) {
    vec3 c1 = cross(Norm, vec3(0.0, 0.0, 1.0)); 
    vec3 c2 = cross(Norm, vec3(0.0, 1.0, 0.0)); 

    if( length(c1) > length(c2)) {
        return normalize(c1);	
    }
    else {
        return normalize(c2);
    }
}

void main(void) {
    vec2 flatTexCoord = interpolate2D(TexCoord0_ES[0], TexCoord0_ES[1], TexCoord0_ES[2]);
    vec4 terrainSample = texture(terrainMap, flatTexCoord);
    vec4 position = (gl_TessCoord.x * gl_in[0].gl_Position +
                     gl_TessCoord.y * gl_in[1].gl_Position + 
                     gl_TessCoord.z * gl_in[2].gl_Position);
    position.y += terrainSample.a * height;
    gl_Position = gVP * position;

    WorldPos_FS = position.xyz;
    Normal_FS = terrainSample.rbg;
    Tangent_FS = GenerateTangent(Normal_FS);
    TexCoord0_FS = flatTexCoord;
}
