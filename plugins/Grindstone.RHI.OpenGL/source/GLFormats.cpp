#include <GL/gl3w.h>

#include <Common/Assert.hpp>

#include <Grindstone.RHI.OpenGL/include/GLFormats.hpp>
#include <GL/gl.h>

struct OpenGLFormatMapping {
	GLenum format;
	GLenum internalFormat;
	GLenum type;
	int componentCount;
	bool isNormalized;
};

GLenum Grindstone::GraphicsAPI::TranslateMinFilterToOpenGL(bool hasMips, TextureFilter minFilter, TextureFilter mipFilter) {
	if (!hasMips) {
		return minFilter == TextureFilter::Linear
			? GL_LINEAR
			: GL_NEAREST;
	}

	if (mipFilter == TextureFilter::Linear) {
		return minFilter == TextureFilter::Linear
			? GL_NEAREST_MIPMAP_LINEAR
			: GL_NEAREST_MIPMAP_NEAREST;
	}

	return minFilter == TextureFilter::Linear
		? GL_LINEAR_MIPMAP_LINEAR
		: GL_LINEAR_MIPMAP_NEAREST;
}

GLenum Grindstone::GraphicsAPI::TranslateMagFilterToOpenGL(TextureFilter filter) {
	constexpr GLenum filters[] = {
		GL_NEAREST,
		GL_LINEAR
	};

	uint8_t index = static_cast<uint8_t>(filter);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(filters) / sizeof(filters[0]), "TranslateMagFilterToOpenGL: Invalid filter value.");

	return filters[index];
}

GLenum Grindstone::GraphicsAPI::TranslateWrapToOpenGL(TextureWrapMode wrap) {
	constexpr GLenum wraps[] = {
		GL_REPEAT,
		GL_CLAMP_TO_EDGE,
		GL_CLAMP_TO_BORDER,
		GL_MIRRORED_REPEAT,
		GL_MIRROR_CLAMP_TO_EDGE
	};

	uint8_t index = static_cast<uint8_t>(wrap);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(wraps) / sizeof(wraps[0]), "Invalid wrap value.");

	return wraps[index];
}

Grindstone::GraphicsAPI::OpenGLFormats formatTable[] = {
	{ 0, 0, 0}, // Invalid
	{ 0, 0, 0}, // R4G4_UNORM_PACK8
	{ GL_RGBA4, GL_RGBA, GL_UNSIGNED_SHORT_4_4_4_4}, // R4G4B4A4_UNORM_PACK16
	{ GL_RGBA4, GL_BGRA, GL_UNSIGNED_SHORT_4_4_4_4}, // B4G4R4A4_UNORM_PACK16
	{ GL_RGB565, GL_RGB, GL_UNSIGNED_SHORT_5_6_5}, // R5G6B5_UNORM_PACK16
	{ GL_RGB565, GL_BGR, GL_UNSIGNED_SHORT_5_6_5}, // B5G6R5_UNORM_PACK16
	{ GL_RGB5_A1, GL_RGBA, GL_UNSIGNED_SHORT_5_5_5_1}, // R5G5B5A1_UNORM_PACK16
	{ GL_RGB5_A1, GL_BGRA, GL_UNSIGNED_SHORT_5_5_5_1}, // B5G5R5A1_UNORM_PACK16
	{ GL_RGB5_A1, GL_BGRA, GL_UNSIGNED_SHORT_1_5_5_5_REV}, // A1R5G5B5_UNORM_PACK16
	{ GL_R8, GL_RED, GL_UNSIGNED_BYTE}, // R8_UNORM
	{ GL_R8_SNORM, GL_RED, GL_BYTE}, // R8_SNORM
	{ GL_R8, GL_RED, GL_UNSIGNED_BYTE}, // R8_USCALED
	{ GL_R8_SNORM, GL_RED, GL_BYTE}, // R8_SSCALED
	{ GL_R8UI, GL_RED_INTEGER, GL_UNSIGNED_BYTE}, // R8_UINT
	{ GL_R8I, GL_RED_INTEGER, GL_BYTE}, // R8_SINT
	{ GL_SR8_EXT, GL_RED, GL_UNSIGNED_BYTE}, // R8_SRGB
	{ GL_RG8, GL_RG, GL_UNSIGNED_BYTE}, // R8G8_UNORM
	{ GL_RG8_SNORM, GL_RG, GL_BYTE}, // R8G8_SNORM
	{ GL_RG8, GL_RG, GL_UNSIGNED_BYTE}, // R8G8_USCALED
	{ GL_RG8_SNORM, GL_RG, GL_BYTE}, // R8G8_SSCALED
	{ GL_RG8UI, GL_RG_INTEGER, GL_UNSIGNED_BYTE}, // R8G8_UINT
	{ GL_RG8I, GL_RG_INTEGER, GL_BYTE}, // R8G8_SINT
	{ GL_SRG8_EXT, GL_RG, GL_UNSIGNED_BYTE}, // R8G8_SRGB
	{ GL_RGB8, GL_RGB, GL_UNSIGNED_BYTE}, // R8G8B8_UNORM
	{ GL_RGB8_SNORM, GL_RGB, GL_BYTE}, // R8G8B8_SNORM
	{ GL_RGB8, GL_RGB, GL_UNSIGNED_BYTE}, // R8G8B8_USCALED
	{ GL_RGB8_SNORM, GL_RGB, GL_BYTE}, // R8G8B8_SSCALED
	{ GL_RGB8UI, GL_RGB_INTEGER, GL_UNSIGNED_BYTE}, // R8G8B8_UINT
	{ GL_RGB8I, GL_RGB_INTEGER, GL_BYTE}, // R8G8B8_SINT
	{ GL_SRGB8, GL_RGB, GL_UNSIGNED_BYTE}, // R8G8B8_SRGB
	{ GL_RGB8, GL_BGR, GL_UNSIGNED_BYTE}, // B8G8R8_UNORM
	{ GL_RGB8_SNORM, GL_BGR, GL_BYTE}, // B8G8R8_SNORM
	{ GL_RGB8, GL_BGR, GL_UNSIGNED_BYTE}, // B8G8R8_USCALED
	{ GL_RGB8_SNORM, GL_BGR, GL_BYTE}, // B8G8R8_SSCALED
	{ GL_RGB8UI, GL_BGR_INTEGER, GL_UNSIGNED_BYTE}, // B8G8R8_UINT
	{ GL_RGB8I, GL_BGR_INTEGER, GL_BYTE}, // B8G8R8_SINT
	{ GL_SRGB8, GL_BGR, GL_UNSIGNED_BYTE}, // B8G8R8_SRGB
	{ GL_RGBA8, GL_RGBA, GL_UNSIGNED_BYTE}, // R8G8B8A8_UNORM
	{ GL_RGBA8_SNORM, GL_RGBA, GL_BYTE}, // R8G8B8A8_SNORM
	{ GL_RGBA8, GL_RGBA, GL_UNSIGNED_BYTE}, // R8G8B8A8_USCALED
	{ GL_RGBA8_SNORM, GL_RGBA, GL_BYTE}, // R8G8B8A8_SSCALED
	{ GL_RGBA8UI, GL_RGBA_INTEGER, GL_UNSIGNED_BYTE}, // R8G8B8A8_UINT
	{ GL_RGBA8I, GL_RGBA_INTEGER, GL_BYTE}, // R8G8B8A8_SINT
	{ GL_SRGB8_ALPHA8, GL_RGBA, GL_UNSIGNED_BYTE}, // R8G8B8A8_SRGB
	{ GL_RGBA8, GL_BGRA, GL_UNSIGNED_BYTE }, // B8G8R8A8_UNORM
	{ GL_RGBA8_SNORM, GL_BGRA, GL_BYTE }, // B8G8R8A8_SNORM
	{ GL_RGBA8, GL_BGRA, GL_UNSIGNED_BYTE }, // B8G8R8A8_USCALED
	{ GL_RGBA8_SNORM, GL_BGRA, GL_BYTE }, // B8G8R8A8_SSCALED
	{ GL_RGBA8UI, GL_BGRA_INTEGER, GL_UNSIGNED_BYTE }, // B8G8R8A8_UINT
	{ GL_RGBA8I, GL_BGRA_INTEGER, GL_BYTE }, // B8G8R8A8_SINT
	{ GL_SRGB8_ALPHA8, GL_BGRA, GL_UNSIGNED_BYTE }, // B8G8R8A8_SRGB
	{ GL_RGBA8, GL_RGBA, GL_UNSIGNED_BYTE }, // A8B8G8R8_UNORM_PACK32
	{ GL_RGBA8_SNORM, GL_RGBA, GL_BYTE }, // A8B8G8R8_SNORM_PACK32
	{ GL_RGBA8, GL_RGBA, GL_UNSIGNED_BYTE }, // A8B8G8R8_USCALED_PACK32
	{ GL_RGBA8_SNORM, GL_RGBA, GL_BYTE }, // A8B8G8R8_SSCALED_PACK32
	{ GL_RGBA8UI, GL_RGBA_INTEGER, GL_UNSIGNED_BYTE }, // A8B8G8R8_UINT_PACK32
	{ GL_RGBA8I, GL_RGBA_INTEGER, GL_BYTE }, // A8B8G8R8_SINT_PACK32
	{ GL_SRGB8_ALPHA8, GL_RGBA, GL_UNSIGNED_BYTE }, // A8B8G8R8_SRGB_PACK32
	{ GL_RGB10_A2, GL_RGBA, GL_UNSIGNED_INT_2_10_10_10_REV }, // A2R10G10B10_UNORM_PACK32
	{ 0, 0, 0 }, // A2R10G10B10_SNORM_PACK32
	{ 0, 0, 0 }, // A2R10G10B10_USCALED_PACK32
	{ 0, 0, 0 }, // A2R10G10B10_SSCALED_PACK32
	{ GL_RGB10_A2UI, GL_RGBA_INTEGER, GL_UNSIGNED_INT_2_10_10_10_REV }, // A2R10G10B10_UINT_PACK32
	{ 0, 0, 0 }, // A2R10G10B10_SINT_PACK32
	{ GL_RGB10_A2, GL_BGRA, GL_UNSIGNED_INT_2_10_10_10_REV }, // A2B10G10R10_UNORM_PACK32
	{ 0, 0, 0 }, // A2B10G10R10_SNORM_PACK32
	{ 0, 0, 0 }, // A2B10G10R10_USCALED_PACK32
	{ 0, 0, 0 }, // A2B10G10R10_SSCALED_PACK32
	{ GL_RGB10_A2UI, GL_BGRA_INTEGER, GL_UNSIGNED_INT_2_10_10_10_REV }, // A2B10G10R10_UINT_PACK32
	{ 0, 0, 0 }, // A2B10G10R10_SINT_PACK32
	{ GL_R16, GL_RED, GL_UNSIGNED_SHORT }, // R16_UNORM
	{ GL_R16_SNORM, GL_RED, GL_SHORT }, // R16_SNORM
	{ 0, 0, 0 }, // R16_USCALED
	{ 0, 0, 0 }, // R16_SSCALED
	{ GL_R16UI, GL_RED_INTEGER, GL_UNSIGNED_SHORT }, // R16_UINT
	{ GL_R16I, GL_RED_INTEGER, GL_SHORT }, // R16_SINT
	{ GL_R16F, GL_RED, GL_HALF_FLOAT }, // R16_SFLOAT
	{ GL_RG16, GL_RG, GL_UNSIGNED_SHORT }, // R16G16_UNORM
	{ GL_RG16_SNORM, GL_RG, GL_SHORT }, // R16G16_SNORM
	{ 0, 0, 0 }, // R16G16_USCALED
	{ 0, 0, 0 }, // R16G16_SSCALED
	{ GL_RG16UI, GL_RG_INTEGER, GL_UNSIGNED_SHORT }, // R16G16_UINT
	{ GL_RG16I, GL_RG_INTEGER, GL_SHORT }, // R16G16_SINT
	{ GL_RG16F, GL_RG, GL_HALF_FLOAT }, // R16G16_SFLOAT
	{ GL_RGB16, GL_RGB, GL_UNSIGNED_SHORT }, // R16G16B16_UNORM
	{ GL_RGB16_SNORM, GL_RGB, GL_SHORT }, // R16G16B16_SNORM
	{ 0, 0, 0 }, // R16G16B16_USCALED
	{ 0, 0, 0 }, // R16G16B16_SSCALED
	{ GL_RGB16UI, GL_RGB_INTEGER, GL_UNSIGNED_SHORT }, // R16G16B16_UINT
	{ GL_RGB16I, GL_RGB_INTEGER, GL_SHORT }, // R16G16B16_SINT
	{ GL_RGB16F, GL_RGB, GL_HALF_FLOAT }, // R16G16B16_SFLOAT
	{ GL_RGBA16, GL_RGBA, GL_UNSIGNED_SHORT }, // R16G16B16A16_UNORM
	{ GL_RGBA16_SNORM, GL_RGBA, GL_SHORT }, // R16G16B16A16_SNORM
	{ 0, 0, 0 }, // R16G16B16A16_USCALED
	{ 0, 0, 0 }, // R16G16B16A16_SSCALED
	{ GL_RGBA16UI, GL_RGBA_INTEGER, GL_UNSIGNED_SHORT }, // R16G16B16A16_UINT
	{ GL_RGBA16I, GL_RGBA_INTEGER, GL_SHORT }, // R16G16B16A16_SINT
	{ GL_RGBA16F, GL_RGBA, GL_HALF_FLOAT }, // R16G16B16A16_SFLOAT
	{ GL_R32UI, GL_RED_INTEGER, GL_UNSIGNED_INT }, // R32_UINT
	{ GL_R32I, GL_RED_INTEGER, GL_INT }, // R32_SINT
	{ GL_R32F, GL_RED, GL_FLOAT }, // R32_SFLOAT
	{ GL_RG32UI, GL_RG_INTEGER, GL_UNSIGNED_INT }, // R32G32_UINT
	{ GL_RG32I, GL_RG_INTEGER, GL_INT }, // R32G32_SINT
	{ GL_RG32F, GL_RG, GL_FLOAT }, // R32G32_SFLOAT
	{ GL_RGB32UI, GL_RGB_INTEGER, GL_UNSIGNED_INT }, // R32G32B32_UINT
	{ GL_RGB32I, GL_RGB_INTEGER, GL_INT }, // R32G32B32_SINT
	{ GL_RGB32F, GL_RGB, GL_FLOAT }, // R32G32B32_SFLOAT
	{ GL_RGBA32UI, GL_RGBA_INTEGER, GL_UNSIGNED_INT }, // R32G32B32A32_UINT
	{ GL_RGBA32I, GL_RGBA_INTEGER, GL_INT }, // R32G32B32A32_SINT
	{ GL_RGBA32F, GL_RGBA, GL_FLOAT }, // R32G32B32A32_SFLOAT
	{ 0, 0, 0 },  // R64_UINT
	{ 0, 0, 0 }, // R64_SINT
	{ 0, 0, 0 }, // R64_SFLOAT
	{ 0, 0, 0 }, // R64G64_UINT
	{ 0, 0, 0 }, // R64G64_SINT
	{ 0, 0, 0 }, // R64G64_SFLOAT
	{ 0, 0, 0 }, // R64G64B64_UINT
	{ 0, 0, 0 }, // R64G64B64_SINT
	{ 0, 0, 0 }, // R64G64B64_SFLOAT
	{ 0, 0, 0 }, // R64G64B64A64_UINT
	{ 0, 0, 0 }, // R64G64B64A64_SINT
	{ 0, 0, 0 }, // R64G64B64A64_SFLOAT
	{ GL_DEPTH_COMPONENT16, GL_DEPTH_COMPONENT, GL_UNSIGNED_SHORT }, // D16_UNORM
	{ GL_DEPTH_COMPONENT24, GL_DEPTH_COMPONENT, GL_UNSIGNED_INT }, // X8_D24_UNORM_PACK32
	{ GL_DEPTH_COMPONENT32F, GL_DEPTH_COMPONENT, GL_FLOAT }, // D32_SFLOAT
	{ GL_STENCIL_INDEX8, GL_STENCIL_INDEX, GL_UNSIGNED_BYTE }, // S8_UINT
	{ GL_DEPTH24_STENCIL8, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8 }, // D16_UNORM_S8_UINT
	{ GL_DEPTH24_STENCIL8, GL_DEPTH_STENCIL, GL_UNSIGNED_INT_24_8 }, // D24_UNORM_S8_UINT
	{ GL_DEPTH32F_STENCIL8, GL_DEPTH_STENCIL, GL_FLOAT_32_UNSIGNED_INT_24_8_REV }, // D32_SFLOAT_S8_UINT
	{ GL_COMPRESSED_RGB_S3TC_DXT1_EXT, 0, 0 }, // BC1_RGB_UNORM_BLOCK
	{ 0, 0, 0 }, // BC1_RGB_SRGB_BLOCK - GL_COMPRESSED_SRGB_S3TC_DXT1_EXT
	{ GL_COMPRESSED_RGBA_S3TC_DXT1_EXT, 0, 0 }, // BC1_RGBA_UNORM_BLOCK
	{ 0, 0, 0 }, // BC1_RGBA_SRGB_BLOCK - GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT
	{ GL_COMPRESSED_RGBA_S3TC_DXT3_EXT, 0, 0 }, // BC2_UNORM_BLOCK
	{ 0, 0, 0 }, // BC2_SRGB_BLOCK - GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT
	{ GL_COMPRESSED_RGBA_S3TC_DXT5_EXT, 0, 0 }, // BC3_UNORM_BLOCK
	{ 0, 0, 0 }, // BC3_SRGB_BLOCK - GL_COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT
	{ GL_COMPRESSED_RED_RGTC1, 0, 0 }, // BC4_UNORM_BLOCK
	{ GL_COMPRESSED_SIGNED_RED_RGTC1, 0, 0 }, // BC4_SNORM_BLOCK
	{ GL_COMPRESSED_RG_RGTC2, 0, 0 }, // BC5_UNORM_BLOCK
	{ GL_COMPRESSED_SIGNED_RG_RGTC2, 0, 0 }, // BC5_SNORM_BLOCK
	{ GL_COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT, 0, 0 }, // BC6H_UFLOAT_BLOCK
	{ GL_COMPRESSED_RGB_BPTC_SIGNED_FLOAT, 0, 0 }, // BC6H_SFLOAT_BLOCK
	{ GL_COMPRESSED_RGBA_BPTC_UNORM, 0, 0 }, // BC7_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB_ALPHA_BPTC_UNORM, 0, 0 }, // BC7_SRGB_BLOCK
	{ GL_COMPRESSED_RGB8_ETC2, 0, 0 }, // ETC2_R8G8B8_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ETC2,                 0, 0 }, // ETC2_R8G8B8_SRGB_BLOCK
	{ GL_COMPRESSED_RGB8_PUNCHTHROUGH_ALPHA1_ETC2,      0, 0 }, // ETC2_R8G8B8A1_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_PUNCHTHROUGH_ALPHA1_ETC2,     0, 0 }, // ETC2_R8G8B8A1_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA8_ETC2_EAC,            0, 0 }, // ETC2_R8G8B8A8_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ETC2_EAC,     0, 0 }, // ETC2_R8G8B8A8_SRGB_BLOCK
	{ GL_COMPRESSED_R11_EAC,                   0, 0 }, // EAC_R11_UNORM_BLOCK
	{ GL_COMPRESSED_SIGNED_R11_EAC,            0, 0 }, // EAC_R11_SNORM_BLOCK
	{ GL_COMPRESSED_RG11_EAC,                  0, 0 }, // EAC_R11G11_UNORM_BLOCK
	{ GL_COMPRESSED_SIGNED_RG11_EAC,           0, 0 }, // EAC_R11G11_SNORM_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_4x4_KHR,         0, 0 }, // ASTC_4x4_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR, 0, 0 }, // ASTC_4x4_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_5x4_KHR,         0, 0 }, // ASTC_5x4_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR, 0, 0 }, // ASTC_5x4_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_5x5_KHR,         0, 0 }, // ASTC_5x5_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR, 0, 0 }, // ASTC_5x5_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_6x5_KHR,         0, 0 }, // ASTC_6x5_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR, 0, 0 }, // ASTC_6x5_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_6x6_KHR,         0, 0 }, // ASTC_6x6_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR, 0, 0 }, // ASTC_6x6_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_8x5_KHR,         0, 0 }, // ASTC_8x5_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR, 0, 0 }, // ASTC_8x5_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_8x6_KHR,         0, 0 }, // ASTC_8x6_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR, 0, 0 }, // ASTC_8x6_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_8x8_KHR,         0, 0 }, // ASTC_8x8_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR, 0, 0 }, // ASTC_8x8_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_10x5_KHR,        0, 0 }, // ASTC_10x5_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR,0, 0 }, // ASTC_10x5_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_10x6_KHR,        0, 0 }, // ASTC_10x6_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR,0, 0 }, // ASTC_10x6_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_10x8_KHR,        0, 0 }, // ASTC_10x8_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR,0, 0 }, // ASTC_10x8_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_10x10_KHR,       0, 0 }, // ASTC_10x10_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR,0,0 }, // ASTC_10x10_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_12x10_KHR,       0, 0 }, // ASTC_12x10_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR,0,0 }, // ASTC_12x10_SRGB_BLOCK
	{ GL_COMPRESSED_RGBA_ASTC_12x12_KHR,       0, 0 }, // ASTC_12x12_UNORM_BLOCK
	{ GL_COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR,0,0 }, // ASTC_12x12_SRGB_BLOCK
	{ 0, 0, 0 }, // G8B8G8R8_422_UNORM
	{ 0, 0, 0 }, // B8G8R8G8_422_UNORM
	{ 0, 0, 0 }, // G8_B8_R8_3PLANE_420_UNORM
	{ 0, 0, 0 }, // G8_B8R8_2PLANE_420_UNORM
	{ 0, 0, 0 }, // G8_B8_R8_3PLANE_422_UNORM
	{ 0, 0, 0 }, // G8_B8R8_2PLANE_422_UNORM
	{ 0, 0, 0 }, // G8_B8_R8_3PLANE_444_UNORM
	{ 0, 0, 0 }, // R10X6_UNORM_PACK16
	{ 0, 0, 0 }, // R10X6G10X6_UNORM_2PACK16
	{ 0, 0, 0 }, // R10X6G10X6B10X6A10X6_UNORM_4PACK16
	{ 0, 0, 0 }, // G10X6B10X6G10X6R10X6_422_UNORM_4PACK16
	{ 0, 0, 0 }, // B10X6G10X6R10X6G10X6_422_UNORM_4PACK16
	{ 0, 0, 0 }, // G10X6_B10X6_R10X6_3PLANE_420_UNORM_3PACK16
	{ 0, 0, 0 }, // G10X6_B10X6R10X6_2PLANE_420_UNORM_3PACK16
	{ 0, 0, 0 }, // G10X6_B10X6_R10X6_3PLANE_422_UNORM_3PACK16
	{ 0, 0, 0 }, // G10X6_B10X6R10X6_2PLANE_422_UNORM_3PACK16
	{ 0, 0, 0 }, // G10X6_B10X6_R10X6_3PLANE_444_UNORM_3PACK16
	{ 0, 0, 0 }, // R12X4_UNORM_PACK16
	{ 0, 0, 0 }, // R12X4G12X4_UNORM_2PACK16
	{ 0, 0, 0 }, // R12X4G12X4B12X4A12X4_UNORM_4PACK16
	{ 0, 0, 0 }, // G12X4B12X4G12X4R12X4_422_UNORM_4PACK16
	{ 0, 0, 0 }, // B12X4G12X4R12X4G12X4_422_UNORM_4PACK16
	{ 0, 0, 0 }, // G12X4_B12X4_R12X4_3PLANE_420_UNORM_3PACK16
	{ 0, 0, 0 }, // G12X4_B12X4R12X4_2PLANE_420_UNORM_3PACK16
	{ 0, 0, 0 }, // G12X4_B12X4_R12X4_3PLANE_422_UNORM_3PACK16
	{ 0, 0, 0 }, // G12X4_B12X4R12X4_2PLANE_422_UNORM_3PACK16
	{ 0, 0, 0 }, // G12X4_B12X4_R12X4_3PLANE_444_UNORM_3PACK16
	{ 0, 0, 0 }, // G16B16G16R16_422_UNORM
	{ 0, 0, 0 }, // B16G16R16G16_422_UNORM
	{ 0, 0, 0 }, // G16_B16_R16_3PLANE_420_UNORM
	{ 0, 0, 0 }, // G16_B16R16_2PLANE_420_UNORM
	{ 0, 0, 0 }, // G16_B16_R16_3PLANE_422_UNORM
	{ 0, 0, 0 }, // G16_B16R16_2PLANE_422_UNORM
	{ 0, 0, 0 }, // G16_B16_R16_3PLANE_444_UNORM
	{ 0, 0, 0 }, // G8_B8R8_2PLANE_444_UNORM
	{ 0, 0, 0 }, // G10X6_B10X6R10X6_2PLANE_444_UNORM_3PACK16
	{ 0, 0, 0 }, // G12X4_B12X4R12X4_2PLANE_444_UNORM_3PACK16
	{ 0, 0, 0 }, // G16_B16R16_2PLANE_444_UNORM
	{ 0, 0, 0 }, // A4R4G4B4_UNORM_PACK16
	{ 0, 0, 0 }, // A4B4G4R4_UNORM_PACK16
	{ GL_COMPRESSED_RGBA_ASTC_4x4_KHR,         0, 0 }, // ASTC_4x4_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_5x4_KHR,         0, 0 }, // ASTC_5x4_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_5x5_KHR,         0, 0 }, // ASTC_5x5_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_6x5_KHR,         0, 0 }, // ASTC_6x5_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_6x6_KHR,         0, 0 }, // ASTC_6x6_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_8x5_KHR,         0, 0 }, // ASTC_8x5_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_8x6_KHR,         0, 0 }, // ASTC_8x6_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_8x8_KHR,         0, 0 }, // ASTC_8x8_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_10x5_KHR,        0, 0 }, // ASTC_10x5_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_10x6_KHR,        0, 0 }, // ASTC_10x6_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_10x8_KHR,        0, 0 }, // ASTC_10x8_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_10x10_KHR,       0, 0 }, // ASTC_10x10_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_12x10_KHR,       0, 0 }, // ASTC_12x10_SFLOAT
	{ GL_COMPRESSED_RGBA_ASTC_12x12_KHR,       0, 0 }, // ASTC_12x12_SFLOAT
	{ 0, 0, 0 }, // PVRTC1_2BPP_UNORM - GL_COMPRESSED_RGB_PVRTC_2BPPV1_IMG
	{ 0, 0, 0 }, // PVRTC1_4BPP_UNORM - GL_COMPRESSED_RGB_PVRTC_4BPPV1_IMG
	{ 0, 0, 0 }, // PVRTC2_2BPP_UNORM - GL_COMPRESSED_RGBA_PVRTC_2BPPV2_IMG
	{ 0, 0, 0 }, // PVRTC2_4BPP_UNORM - GL_COMPRESSED_RGBA_PVRTC_4BPPV2_IMG
	{ 0, 0, 0 }, // PVRTC1_2BPP_SRGB	 - GL_COMPRESSED_SRGB_PVRTC_2BPPV1_EXT
	{ 0, 0, 0 }, // PVRTC1_4BPP_SRGB	 - GL_COMPRESSED_SRGB_PVRTC_4BPPV1_EXT
	{ 0, 0, 0 }, // PVRTC2_2BPP_SRGB - GL_COMPRESSED_SRGB_ALPHA_PVRTC_2BPPV2_IMG
	{ 0, 0, 0 }, // PVRTC2_4BPP_SRGB - GL_COMPRESSED_SRGB_ALPHA_PVRTC_4BPPV2_IMG
	{ 0, 0, 0 }, // R16G16_S10_5
	{ 0, 0, 0 }, // A1B5G5R5_UNORM_PACK16
	{ 0, 0, 0 }, // A8_UNORM - GL_ALPHA8
};

Grindstone::GraphicsAPI::OpenGLFormats Grindstone::GraphicsAPI::TranslateFormatToOpenGL(Format format) {
	return formatTable[static_cast<size_t>(format)];
}

GLenum Grindstone::GraphicsAPI::TranslateCullModeToOpenGL(CullMode cullMode) {
	GLenum culls[] = {
		GL_NONE,
		GL_FRONT,
		GL_BACK,
		GL_FRONT_AND_BACK
	};

	uint8_t index = static_cast<uint8_t>(cullMode);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(culls) / sizeof(culls[0]), "Invalid cullMode value.");

	return culls[index];
}

GLuint Grindstone::GraphicsAPI::TranslatePolygonModeToOpenGL(PolygonFillMode mode) {
	constexpr GLenum modes[] = {
		GL_POINT,
		GL_LINE,
		GL_FILL
	};

	uint8_t index = static_cast<uint8_t>(mode);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(modes) / sizeof(modes[0]), "Invalid PolygonFillMode value.");

	return modes[index];
}

GLuint Grindstone::GraphicsAPI::TranslateGeometryTypeToOpenGL(GeometryType geometryType) {
	constexpr GLenum types[] = {
		GL_POINTS,
		GL_LINES,
		GL_LINE_STRIP,
		GL_LINE_LOOP,
		GL_TRIANGLE_STRIP,
		GL_TRIANGLE_FAN,
		GL_TRIANGLES,
		GL_LINES_ADJACENCY,
		GL_TRIANGLES_ADJACENCY,
		GL_TRIANGLE_STRIP_ADJACENCY,
		GL_PATCHES
	};

	uint8_t index = static_cast<uint8_t>(geometryType);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(types) / sizeof(types[0]), "Invalid geometryType value.");

	return types[index];
}

GLenum Grindstone::GraphicsAPI::TranslateBlendOpToOpenGL(BlendOperation op) {
	constexpr GLenum funcs[] = {
		GL_NONE,
		GL_FUNC_ADD,
		GL_FUNC_SUBTRACT,
		GL_FUNC_REVERSE_SUBTRACT,
		GL_MIN,
		GL_MAX,
		GL_NONE, // TODO: This should be GL_ZERO or something like that.
		GL_SRC_NV,
		GL_DST_NV,
		GL_SRC_OVER_NV,
		GL_DST_OVER_NV,
		GL_SRC_IN_NV,
		GL_DST_IN_NV,
		GL_SRC_OUT_NV,
		GL_DST_OUT_NV,
		GL_SRC_ATOP_NV,
		GL_DST_ATOP_NV,
		GL_XOR_NV,
		GL_MULTIPLY_KHR,
		GL_SCREEN_KHR,
		GL_OVERLAY_KHR,
		GL_DARKEN_KHR,
		GL_LIGHTEN_KHR,
		GL_COLORDODGE_KHR,
		GL_COLORBURN_KHR,
		GL_HARDLIGHT_KHR,
		GL_SOFTLIGHT_KHR,
		GL_DIFFERENCE_KHR,
		GL_EXCLUSION_KHR,
		GL_INVERT,
		GL_INVERT_RGB_NV,
		GL_LINEARDODGE_NV,
		GL_LINEARBURN_NV,
		GL_VIVIDLIGHT_NV,
		GL_LINEARLIGHT_NV,
		GL_PINLIGHT_NV,
		GL_HARDMIX_NV,
		GL_HSL_HUE_KHR,
		GL_HSL_SATURATION_KHR,
		GL_HSL_COLOR_KHR,
		GL_HSL_LUMINOSITY_KHR,
		GL_PLUS_NV,
		GL_PLUS_CLAMPED_NV,
		GL_PLUS_CLAMPED_ALPHA_NV,
		GL_PLUS_DARKER_NV,
		GL_MINUS_NV,
		GL_MINUS_CLAMPED_NV,
		GL_CONTRAST_NV,
		GL_INVERT_OVG_NV,
		GL_RED_NV,
		GL_GREEN_NV,
		GL_BLUE_NV
	};

	uint8_t index = static_cast<uint8_t>(op);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(funcs) / sizeof(funcs[0]), "Invalid BlendOperation value.");

	return funcs[index];
}

GLenum Grindstone::GraphicsAPI::TranslateBlendFactorToOpenGL(BlendFactor factor) {
	constexpr GLenum factors[] = {
		GL_ZERO,
		GL_ONE,
		GL_SRC_COLOR,
		GL_ONE_MINUS_SRC_COLOR,
		GL_DST_COLOR,
		GL_ONE_MINUS_DST_COLOR,
		GL_SRC_ALPHA,
		GL_ONE_MINUS_SRC_ALPHA,
		GL_DST_ALPHA,
		GL_ONE_MINUS_DST_ALPHA,
		GL_CONSTANT_COLOR,
		GL_ONE_MINUS_CONSTANT_COLOR,
		GL_CONSTANT_ALPHA,
		GL_ONE_MINUS_CONSTANT_ALPHA,
		GL_SRC_ALPHA_SATURATE,
		GL_SRC1_COLOR,
		GL_ONE_MINUS_SRC1_COLOR,
		GL_SRC1_ALPHA,
		GL_ONE_MINUS_SRC1_ALPHA
	};

	uint8_t index = static_cast<uint8_t>(factor);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(factors) / sizeof(factors[0]), "Invalid BlendFactor value.");

	return factors[index];
}

GLenum Grindstone::GraphicsAPI::TranslateCompareOpToOpenGL(CompareOperation op) {
	constexpr GLenum funcs[] = {
		GL_NEVER,
		GL_LESS,
		GL_EQUAL,
		GL_LEQUAL,
		GL_GREATER,
		GL_NOTEQUAL,
		GL_GEQUAL,
		GL_ALWAYS
	};

	uint8_t index = static_cast<uint8_t>(op);
	GS_ASSERT_ENGINE_WITH_MESSAGE(index < sizeof(funcs) / sizeof(funcs[0]), "Invalid CompareOperation value.");

	return funcs[index];
}
