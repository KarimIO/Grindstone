include "$GRINDSTONE.RENDERER.DEFERRED/pipelineSets/common/matrixTransformations.gpset"
include "$GRINDSTONE.RENDERER.DEFERRED/pipelineSets/common/rendererUniform.gpset"

pipelineSet "DebugDeferred" {
	configuration "main" {
		pass "main" {
			shaderEntrypoint: vertex mainVertex
			shaderEntrypoint: fragment mainFragment
			renderQueue: "Editor"

			properties {
				cull: back
				depthBias: false
				depthWrite: false
				depthTest: false
				depthClamp: false
				depthCompareOp: lessOrEqual
				attachments: {
					colorMask: rgba
					blendPreset: opaque
				}
			}

			requiresBlocks [
				GsComputeWorldSpacePosition,
				GsComputeViewSpacePosition,
				GsViewNormal,
				GsRendererUniform,
				GsLinearizeDepthFromNearFar
			]

			shaderHlsl {
				struct VertexInput {
					[[vk::location(0)]] float2 position : POSITION0;
				};

				struct VertexToFragment {
					float4 position : SV_Position;
					[[vk::location(0)]] float2 fragmentTexCoord : TEXCOORD0;
					[[vk::location(1)]] float2 scaledFragmentTexCoord : TEXCOORD1;
				};

				VertexToFragment mainVertex(VertexInput inData) {
					VertexToFragment outData = (VertexToFragment)0;
					outData.position = float4(inData.position, 0.0, 1.0);
					outData.fragmentTexCoord = ((inData.position * 0.5f) + float2(0.5f, 0.5f));
					outData.scaledFragmentTexCoord = outData.fragmentTexCoord * rendererUbo.renderScale;
					return outData;
				}

				SamplerState gbufferSampler : register(s0, space2);
				Texture2D<float4> gbufferDepth : register(t1, space2);
				Texture2D<float4> gbufferAlbedo : register(t2, space2);
				Texture2D<float4> gbufferNormal : register(t3, space2);
				Texture2D<float4> gbufferSpecularRoughness : register(t4, space2);
				Texture2D<float4> ambientOcclusion : register(t5, space2);

				struct DebugUbo {
					uint mode;
					float nearDistance;
					float farDistance;
				};

				ConstantBuffer<DebugUbo> debugUbo : register(b6, space2);

				#define RenderMode_Default 0
				#define RenderMode_Position 1
				#define RenderMode_PositionMod 2
				#define RenderMode_ViewPosition 3
				#define RenderMode_ViewPositionMod 4
				#define RenderMode_Depth 5
				#define RenderMode_DepthMod 6
				#define RenderMode_Normal 7
				#define RenderMode_ViewNormal 8
				#define RenderMode_Albedo 9
				#define RenderMode_Specular 10
				#define RenderMode_Roughness 11
				#define RenderMode_AmbientOcclusion 12

				float4 mainFragment(VertexToFragment inData) : SV_TARGET0 {
					switch (debugUbo.mode) {
						case RenderMode_Position: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float3 pos = ComputeWorldSpacePosition(rendererUbo.inverseProjectionMatrix, rendererUbo.inverseViewMatrix, inData.fragmentTexCoord, depth);
							return float4(pos, 1);
						}
						case RenderMode_PositionMod: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float3 pos = fmod(abs(ComputeWorldSpacePosition(rendererUbo.inverseProjectionMatrix, rendererUbo.inverseViewMatrix, inData.fragmentTexCoord, depth)), 1.0f);
							return float4(pos, 1);
						}
						case RenderMode_ViewPosition: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float3 pos = ComputeViewSpacePosition(rendererUbo.inverseProjectionMatrix, inData.fragmentTexCoord, depth);
							return float4(pos, 1);
						}
						case RenderMode_ViewPositionMod: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float3 pos = fmod(abs(ComputeViewSpacePosition(rendererUbo.inverseProjectionMatrix, inData.fragmentTexCoord, depth)), 1.0f);
							return float4(pos, 1);
						}
						case RenderMode_Depth: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float linearDepth = LinearizeDepthFromNearFar(debugUbo.nearDistance, debugUbo.farDistance, depth) / debugUbo.farDistance;
							return float4(linearDepth, linearDepth, linearDepth, 1);
						}
						case RenderMode_DepthMod: {
							float depth = gbufferDepth.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							float linearDepth = LinearizeDepthFromNearFar(debugUbo.nearDistance, debugUbo.farDistance, depth);
							float modDepth = fmod(linearDepth, 1.0f);
							return float4(modDepth, modDepth, modDepth, 1);
						}
						case RenderMode_Normal: {
							float3 normal = gbufferNormal.Sample(gbufferSampler, inData.scaledFragmentTexCoord).rgb * 0.5f + float3(0.5f, 0.5f, 0.5f);
							return float4(normal, 1);
						}
						case RenderMode_ViewNormal: {
							float3 normal = ViewNormal(rendererUbo.viewMatrix, gbufferNormal.Sample(gbufferSampler, inData.scaledFragmentTexCoord).rgb);
							return float4(normal, 1);
						}
						case RenderMode_Albedo: {
							float3 albedo = gbufferAlbedo.Sample(gbufferSampler, inData.scaledFragmentTexCoord).rgb;
							return float4(albedo, 1);
						}
						case RenderMode_Specular: {
							float3 specular = gbufferSpecularRoughness.Sample(gbufferSampler, inData.scaledFragmentTexCoord).rgb;
							return float4(specular, 1);
						}
						case RenderMode_Roughness: {
							float roughness = gbufferSpecularRoughness.Sample(gbufferSampler, inData.scaledFragmentTexCoord).a;
							return float4(roughness, roughness, roughness, 1);
						}
						case RenderMode_AmbientOcclusion: {
							float ao = ambientOcclusion.Sample(gbufferSampler, inData.scaledFragmentTexCoord).r;
							return float4(ao, ao, ao, 1);
						}
						default: {
							return float4(0, 0, 0, 1);
						}
					}
				}
			}
		}
	}
}
