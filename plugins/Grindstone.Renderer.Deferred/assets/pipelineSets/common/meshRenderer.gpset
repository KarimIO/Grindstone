include "$GRINDSTONE.RENDERER.DEFERRED/pipelineSets/common/rendererUniform.gpset"

shaderBlock GsMeshRendererInstanceUbo {
	shaderHlsl {
		struct RenderInstanceUBO {
			column_major float4x4 modelMatrix;
			uint rendererId;
		};

		ConstantBuffer<RenderInstanceUBO> renderInstanceUbo : register(b0, space2);
	}
}

shaderBlock GsMeshRendererVertexInput {
	shaderHlsl {
		struct VertexInput {
			[[vk::location(0)]] float4 position : POSITION0;
			[[vk::location(1)]] float3 normal : NORMAL0;
			[[vk::location(2)]] float3 tangent : TANGENT0;
			[[vk::location(3)]] float2 texCoord0 : TEXCOORD0;
		};
	}
}

shaderBlock GsMeshRendererVertex {
	requiresBlocks [
		GsMeshRendererVertexInput,
		GsRendererUniform,
		GsMeshRendererInstanceUbo
	]

	shaderHlsl {
		struct VertexToFragment {
			float4 position : SV_Position;
			[[vk::location(0)]] float3 normal : COLOR0;
			[[vk::location(1)]] float3 tangent : COLOR1;
			[[vk::location(2)]] float2 texCoord0 : TEXCOORD0;
		};

		VertexToFragment mainVertex(VertexInput input) {
			VertexToFragment output;

			float3x3 modelMat3 = (float3x3)renderInstanceUbo.modelMatrix;
			output.normal = mul(modelMat3, normalize(input.normal));
			output.tangent = mul(modelMat3, normalize(input.tangent));
			output.texCoord0 = input.texCoord0;

			float4 worldPos = mul(renderInstanceUbo.modelMatrix, float4(input.position.xyz, 1.0));
			float4 viewPos  = mul(rendererUbo.viewMatrix, worldPos);
			output.position = mul(rendererUbo.projectionMatrix, viewPos);

			return output;
		}
	}
}

shaderBlock GsMeshRendererFragmentOutput {
	shaderHlsl {
		struct FragmentOutput {
			[[vk::location(0)]] float4 gbufferAlbedoMatrix : COLOR0;
			[[vk::location(1)]] float4 gbufferNormals : COLOR1;
			[[vk::location(2)]] float4 gbufferSpecularRoughness : COLOR2;
		};
	}
}

shaderBlock GsTransformNormalToWorldSpace {
	shaderHlsl {
		float3 TransformNormalToWorldSpace(float3 vertexNormalValue, float3 normalTextureSample, float3 vertexTangentValue) {
			float3 bumpMapNormal = normalTextureSample;
			if (all(normalTextureSample == float3(0, 0, 0))) {
				return vertexNormalValue;
			}

			float3 newNormal = normalize(vertexNormalValue);
			float3 newTangent = normalize(vertexTangentValue);
			newTangent = normalize(newTangent - dot(newTangent, newNormal) * newNormal);
			float3 bitangent = cross(newTangent, newNormal);
			bumpMapNormal = 2.0 * bumpMapNormal - float3(1.0, 1.0, 1.0);
			bumpMapNormal = float3(-bumpMapNormal.xy, bumpMapNormal.z);
			float3x3 tangentBitangentNormalMatrix = float3x3(newTangent, bitangent, newNormal);
			return normalize(mul(bumpMapNormal, tangentBitangentNormalMatrix));
		}
	}
}

shaderBlock GsShadowRendererUniform {
	shaderHlsl {
		struct RendererUBO {
			column_major float4x4 projectionViewMatrix;
		};

		ConstantBuffer<RendererUBO> rendererUbo : register(b0, space0);
	}
}

shaderBlock GsShadowRenderer {
	requiresBlocks [
		GsMeshRendererVertexInput,
		GsMeshRendererInstanceUbo,
		GsShadowRendererUniform
	]

	shaderHlsl {
		struct VertexToFragment {
			float4 position : SV_Position;
		};

		VertexToFragment mainShadowVertex(VertexInput input) {
			VertexToFragment output;

			float4 worldPos = mul(renderInstanceUbo.modelMatrix, float4(input.position.xyz, 1.0));
			output.position = mul(rendererUbo.projectionViewMatrix, worldPos);

			return output;
		}

		void mainShadowFragment(VertexToFragment input) {
		}
	}
}

shaderBlock GsMousePickRenderer {
	requiresBlocks [
		GsMeshRendererVertexInput,
		GsMeshRendererInstanceUbo
	]

	shaderHlsl {
		struct RendererUBO {
			column_major float4x4 projectionMatrix;
			column_major float4x4 viewMatrix;
		};

		ConstantBuffer<RendererUBO> rendererUbo : register(b0, space0);

		struct ShaderStorageBufferObject {
			float depth;
			uint identity;
		};

		RWByteAddressBuffer pickingBuffer : register(u1, space0);

		struct VertexToFragment {
			float4 position : SV_Position;
		};

		VertexToFragment mainMousePickVertex(VertexInput input) {
			VertexToFragment output;

			float4 worldPos = mul(renderInstanceUbo.modelMatrix, float4(input.position.xyz, 1.0));
			float4 viewPos  = mul(rendererUbo.viewMatrix, worldPos);
			output.position = mul(rendererUbo.projectionMatrix, viewPos);

			return output;
		}

		const uint kDepthOffset = 0;
		const uint kIdentityOffset = 4;

		void UpdatePickingBuffer(uint identity, float z) {
			uint d = asuint(z);
			if (d >= pickingBuffer.Load(0))
				return;

			pickingBuffer.Store(0, asuint(d));
			pickingBuffer.Store(4, identity);
		}

		uint mainMousePickFragment(VertexToFragment input) : SV_TARGET0 {
			UpdatePickingBuffer(renderInstanceUbo.rendererId, input.position.z);
			return renderInstanceUbo.rendererId;
		}
	}
}
